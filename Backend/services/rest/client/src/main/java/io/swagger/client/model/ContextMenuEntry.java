/*
 * edu-sharing Repository REST API
 * The public restful API of the edu-sharing repository.
 *
 * OpenAPI spec version: 1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * ContextMenuEntry
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-06-09T17:32:21.273+02:00")
public class ContextMenuEntry {
  @SerializedName("position")
  private Integer position = null;

  @SerializedName("icon")
  private String icon = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("url")
  private String url = null;

  @SerializedName("isDisabled")
  private Boolean isDisabled = false;

  @SerializedName("openInNew")
  private Boolean openInNew = false;

  @SerializedName("isSeparate")
  private Boolean isSeparate = false;

  @SerializedName("isSeparateBottom")
  private Boolean isSeparateBottom = false;

  @SerializedName("onlyDesktop")
  private Boolean onlyDesktop = false;

  @SerializedName("onlyWeb")
  private Boolean onlyWeb = false;

  @SerializedName("mode")
  private String mode = null;

  /**
   * Gets or Sets scopes
   */
  @JsonAdapter(ScopesEnum.Adapter.class)
  public enum ScopesEnum {
    RENDER("Render"),
    
    SEARCH("Search"),
    
    COLLECTIONSREFERENCES("CollectionsReferences"),
    
    COLLECTIONSCOLLECTION("CollectionsCollection"),
    
    WORKSPACELIST("WorkspaceList"),
    
    WORKSPACETREE("WorkspaceTree"),
    
    OER("Oer"),
    
    CREATEMENU("CreateMenu");

    private String value;

    ScopesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScopesEnum fromValue(String text) {
      for (ScopesEnum b : ScopesEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ScopesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScopesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScopesEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ScopesEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("scopes")
  private List<ScopesEnum> scopes = null;

  @SerializedName("ajax")
  private Boolean ajax = false;

  @SerializedName("group")
  private String group = null;

  @SerializedName("permission")
  private String permission = null;

  @SerializedName("toolpermission")
  private String toolpermission = null;

  @SerializedName("isDirectory")
  private Boolean isDirectory = false;

  @SerializedName("showAsAction")
  private Boolean showAsAction = false;

  @SerializedName("multiple")
  private Boolean multiple = false;

  /**
   * Gets or Sets changeStrategy
   */
  @JsonAdapter(ChangeStrategyEnum.Adapter.class)
  public enum ChangeStrategyEnum {
    UPDATE("update"),
    
    REMOVE("remove");

    private String value;

    ChangeStrategyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChangeStrategyEnum fromValue(String text) {
      for (ChangeStrategyEnum b : ChangeStrategyEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ChangeStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChangeStrategyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChangeStrategyEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ChangeStrategyEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("changeStrategy")
  private ChangeStrategyEnum changeStrategy = null;

  public ContextMenuEntry position(Integer position) {
    this.position = position;
    return this;
  }

   /**
   * Get position
   * @return position
  **/
  @ApiModelProperty(value = "")
  public Integer getPosition() {
    return position;
  }

  public void setPosition(Integer position) {
    this.position = position;
  }

  public ContextMenuEntry icon(String icon) {
    this.icon = icon;
    return this;
  }

   /**
   * Get icon
   * @return icon
  **/
  @ApiModelProperty(value = "")
  public String getIcon() {
    return icon;
  }

  public void setIcon(String icon) {
    this.icon = icon;
  }

  public ContextMenuEntry name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ContextMenuEntry url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @ApiModelProperty(value = "")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public ContextMenuEntry isDisabled(Boolean isDisabled) {
    this.isDisabled = isDisabled;
    return this;
  }

   /**
   * Get isDisabled
   * @return isDisabled
  **/
  @ApiModelProperty(value = "")
  public Boolean isIsDisabled() {
    return isDisabled;
  }

  public void setIsDisabled(Boolean isDisabled) {
    this.isDisabled = isDisabled;
  }

  public ContextMenuEntry openInNew(Boolean openInNew) {
    this.openInNew = openInNew;
    return this;
  }

   /**
   * Get openInNew
   * @return openInNew
  **/
  @ApiModelProperty(value = "")
  public Boolean isOpenInNew() {
    return openInNew;
  }

  public void setOpenInNew(Boolean openInNew) {
    this.openInNew = openInNew;
  }

  public ContextMenuEntry isSeparate(Boolean isSeparate) {
    this.isSeparate = isSeparate;
    return this;
  }

   /**
   * Get isSeparate
   * @return isSeparate
  **/
  @ApiModelProperty(value = "")
  public Boolean isIsSeparate() {
    return isSeparate;
  }

  public void setIsSeparate(Boolean isSeparate) {
    this.isSeparate = isSeparate;
  }

  public ContextMenuEntry isSeparateBottom(Boolean isSeparateBottom) {
    this.isSeparateBottom = isSeparateBottom;
    return this;
  }

   /**
   * Get isSeparateBottom
   * @return isSeparateBottom
  **/
  @ApiModelProperty(value = "")
  public Boolean isIsSeparateBottom() {
    return isSeparateBottom;
  }

  public void setIsSeparateBottom(Boolean isSeparateBottom) {
    this.isSeparateBottom = isSeparateBottom;
  }

  public ContextMenuEntry onlyDesktop(Boolean onlyDesktop) {
    this.onlyDesktop = onlyDesktop;
    return this;
  }

   /**
   * Get onlyDesktop
   * @return onlyDesktop
  **/
  @ApiModelProperty(value = "")
  public Boolean isOnlyDesktop() {
    return onlyDesktop;
  }

  public void setOnlyDesktop(Boolean onlyDesktop) {
    this.onlyDesktop = onlyDesktop;
  }

  public ContextMenuEntry onlyWeb(Boolean onlyWeb) {
    this.onlyWeb = onlyWeb;
    return this;
  }

   /**
   * Get onlyWeb
   * @return onlyWeb
  **/
  @ApiModelProperty(value = "")
  public Boolean isOnlyWeb() {
    return onlyWeb;
  }

  public void setOnlyWeb(Boolean onlyWeb) {
    this.onlyWeb = onlyWeb;
  }

  public ContextMenuEntry mode(String mode) {
    this.mode = mode;
    return this;
  }

   /**
   * Get mode
   * @return mode
  **/
  @ApiModelProperty(value = "")
  public String getMode() {
    return mode;
  }

  public void setMode(String mode) {
    this.mode = mode;
  }

  public ContextMenuEntry scopes(List<ScopesEnum> scopes) {
    this.scopes = scopes;
    return this;
  }

  public ContextMenuEntry addScopesItem(ScopesEnum scopesItem) {
    if (this.scopes == null) {
      this.scopes = new ArrayList<ScopesEnum>();
    }
    this.scopes.add(scopesItem);
    return this;
  }

   /**
   * Get scopes
   * @return scopes
  **/
  @ApiModelProperty(value = "")
  public List<ScopesEnum> getScopes() {
    return scopes;
  }

  public void setScopes(List<ScopesEnum> scopes) {
    this.scopes = scopes;
  }

  public ContextMenuEntry ajax(Boolean ajax) {
    this.ajax = ajax;
    return this;
  }

   /**
   * Get ajax
   * @return ajax
  **/
  @ApiModelProperty(value = "")
  public Boolean isAjax() {
    return ajax;
  }

  public void setAjax(Boolean ajax) {
    this.ajax = ajax;
  }

  public ContextMenuEntry group(String group) {
    this.group = group;
    return this;
  }

   /**
   * Get group
   * @return group
  **/
  @ApiModelProperty(value = "")
  public String getGroup() {
    return group;
  }

  public void setGroup(String group) {
    this.group = group;
  }

  public ContextMenuEntry permission(String permission) {
    this.permission = permission;
    return this;
  }

   /**
   * Get permission
   * @return permission
  **/
  @ApiModelProperty(value = "")
  public String getPermission() {
    return permission;
  }

  public void setPermission(String permission) {
    this.permission = permission;
  }

  public ContextMenuEntry toolpermission(String toolpermission) {
    this.toolpermission = toolpermission;
    return this;
  }

   /**
   * Get toolpermission
   * @return toolpermission
  **/
  @ApiModelProperty(value = "")
  public String getToolpermission() {
    return toolpermission;
  }

  public void setToolpermission(String toolpermission) {
    this.toolpermission = toolpermission;
  }

  public ContextMenuEntry isDirectory(Boolean isDirectory) {
    this.isDirectory = isDirectory;
    return this;
  }

   /**
   * Get isDirectory
   * @return isDirectory
  **/
  @ApiModelProperty(value = "")
  public Boolean isIsDirectory() {
    return isDirectory;
  }

  public void setIsDirectory(Boolean isDirectory) {
    this.isDirectory = isDirectory;
  }

  public ContextMenuEntry showAsAction(Boolean showAsAction) {
    this.showAsAction = showAsAction;
    return this;
  }

   /**
   * Get showAsAction
   * @return showAsAction
  **/
  @ApiModelProperty(value = "")
  public Boolean isShowAsAction() {
    return showAsAction;
  }

  public void setShowAsAction(Boolean showAsAction) {
    this.showAsAction = showAsAction;
  }

  public ContextMenuEntry multiple(Boolean multiple) {
    this.multiple = multiple;
    return this;
  }

   /**
   * Get multiple
   * @return multiple
  **/
  @ApiModelProperty(value = "")
  public Boolean isMultiple() {
    return multiple;
  }

  public void setMultiple(Boolean multiple) {
    this.multiple = multiple;
  }

  public ContextMenuEntry changeStrategy(ChangeStrategyEnum changeStrategy) {
    this.changeStrategy = changeStrategy;
    return this;
  }

   /**
   * Get changeStrategy
   * @return changeStrategy
  **/
  @ApiModelProperty(value = "")
  public ChangeStrategyEnum getChangeStrategy() {
    return changeStrategy;
  }

  public void setChangeStrategy(ChangeStrategyEnum changeStrategy) {
    this.changeStrategy = changeStrategy;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContextMenuEntry contextMenuEntry = (ContextMenuEntry) o;
    return Objects.equals(this.position, contextMenuEntry.position) &&
        Objects.equals(this.icon, contextMenuEntry.icon) &&
        Objects.equals(this.name, contextMenuEntry.name) &&
        Objects.equals(this.url, contextMenuEntry.url) &&
        Objects.equals(this.isDisabled, contextMenuEntry.isDisabled) &&
        Objects.equals(this.openInNew, contextMenuEntry.openInNew) &&
        Objects.equals(this.isSeparate, contextMenuEntry.isSeparate) &&
        Objects.equals(this.isSeparateBottom, contextMenuEntry.isSeparateBottom) &&
        Objects.equals(this.onlyDesktop, contextMenuEntry.onlyDesktop) &&
        Objects.equals(this.onlyWeb, contextMenuEntry.onlyWeb) &&
        Objects.equals(this.mode, contextMenuEntry.mode) &&
        Objects.equals(this.scopes, contextMenuEntry.scopes) &&
        Objects.equals(this.ajax, contextMenuEntry.ajax) &&
        Objects.equals(this.group, contextMenuEntry.group) &&
        Objects.equals(this.permission, contextMenuEntry.permission) &&
        Objects.equals(this.toolpermission, contextMenuEntry.toolpermission) &&
        Objects.equals(this.isDirectory, contextMenuEntry.isDirectory) &&
        Objects.equals(this.showAsAction, contextMenuEntry.showAsAction) &&
        Objects.equals(this.multiple, contextMenuEntry.multiple) &&
        Objects.equals(this.changeStrategy, contextMenuEntry.changeStrategy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(position, icon, name, url, isDisabled, openInNew, isSeparate, isSeparateBottom, onlyDesktop, onlyWeb, mode, scopes, ajax, group, permission, toolpermission, isDirectory, showAsAction, multiple, changeStrategy);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContextMenuEntry {\n");
    
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    isDisabled: ").append(toIndentedString(isDisabled)).append("\n");
    sb.append("    openInNew: ").append(toIndentedString(openInNew)).append("\n");
    sb.append("    isSeparate: ").append(toIndentedString(isSeparate)).append("\n");
    sb.append("    isSeparateBottom: ").append(toIndentedString(isSeparateBottom)).append("\n");
    sb.append("    onlyDesktop: ").append(toIndentedString(onlyDesktop)).append("\n");
    sb.append("    onlyWeb: ").append(toIndentedString(onlyWeb)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("    ajax: ").append(toIndentedString(ajax)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    permission: ").append(toIndentedString(permission)).append("\n");
    sb.append("    toolpermission: ").append(toIndentedString(toolpermission)).append("\n");
    sb.append("    isDirectory: ").append(toIndentedString(isDirectory)).append("\n");
    sb.append("    showAsAction: ").append(toIndentedString(showAsAction)).append("\n");
    sb.append("    multiple: ").append(toIndentedString(multiple)).append("\n");
    sb.append("    changeStrategy: ").append(toIndentedString(changeStrategy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

