/*
 * edu-sharing Repository REST API
 * The public restful API of the edu-sharing repository.
 *
 * OpenAPI spec version: 1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.Query;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Frontpage
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-06-09T17:32:21.273+02:00")
public class Frontpage {
  @SerializedName("totalCount")
  private Integer totalCount = null;

  @SerializedName("displayCount")
  private Integer displayCount = null;

  /**
   * Gets or Sets mode
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    COLLECTION("collection"),
    
    RATING("rating"),
    
    VIEWS("views"),
    
    DOWNLOADS("downloads");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModeEnum fromValue(String text) {
      for (ModeEnum b : ModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("mode")
  private ModeEnum mode = null;

  @SerializedName("timespan")
  private Integer timespan = null;

  @SerializedName("timespanAll")
  private Boolean timespanAll = false;

  @SerializedName("queries")
  private List<Query> queries = null;

  @SerializedName("collection")
  private String collection = null;

  public Frontpage totalCount(Integer totalCount) {
    this.totalCount = totalCount;
    return this;
  }

   /**
   * Get totalCount
   * @return totalCount
  **/
  @ApiModelProperty(value = "")
  public Integer getTotalCount() {
    return totalCount;
  }

  public void setTotalCount(Integer totalCount) {
    this.totalCount = totalCount;
  }

  public Frontpage displayCount(Integer displayCount) {
    this.displayCount = displayCount;
    return this;
  }

   /**
   * Get displayCount
   * @return displayCount
  **/
  @ApiModelProperty(value = "")
  public Integer getDisplayCount() {
    return displayCount;
  }

  public void setDisplayCount(Integer displayCount) {
    this.displayCount = displayCount;
  }

  public Frontpage mode(ModeEnum mode) {
    this.mode = mode;
    return this;
  }

   /**
   * Get mode
   * @return mode
  **/
  @ApiModelProperty(value = "")
  public ModeEnum getMode() {
    return mode;
  }

  public void setMode(ModeEnum mode) {
    this.mode = mode;
  }

  public Frontpage timespan(Integer timespan) {
    this.timespan = timespan;
    return this;
  }

   /**
   * Get timespan
   * @return timespan
  **/
  @ApiModelProperty(value = "")
  public Integer getTimespan() {
    return timespan;
  }

  public void setTimespan(Integer timespan) {
    this.timespan = timespan;
  }

  public Frontpage timespanAll(Boolean timespanAll) {
    this.timespanAll = timespanAll;
    return this;
  }

   /**
   * Get timespanAll
   * @return timespanAll
  **/
  @ApiModelProperty(value = "")
  public Boolean isTimespanAll() {
    return timespanAll;
  }

  public void setTimespanAll(Boolean timespanAll) {
    this.timespanAll = timespanAll;
  }

  public Frontpage queries(List<Query> queries) {
    this.queries = queries;
    return this;
  }

  public Frontpage addQueriesItem(Query queriesItem) {
    if (this.queries == null) {
      this.queries = new ArrayList<Query>();
    }
    this.queries.add(queriesItem);
    return this;
  }

   /**
   * Get queries
   * @return queries
  **/
  @ApiModelProperty(value = "")
  public List<Query> getQueries() {
    return queries;
  }

  public void setQueries(List<Query> queries) {
    this.queries = queries;
  }

  public Frontpage collection(String collection) {
    this.collection = collection;
    return this;
  }

   /**
   * Get collection
   * @return collection
  **/
  @ApiModelProperty(value = "")
  public String getCollection() {
    return collection;
  }

  public void setCollection(String collection) {
    this.collection = collection;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Frontpage frontpage = (Frontpage) o;
    return Objects.equals(this.totalCount, frontpage.totalCount) &&
        Objects.equals(this.displayCount, frontpage.displayCount) &&
        Objects.equals(this.mode, frontpage.mode) &&
        Objects.equals(this.timespan, frontpage.timespan) &&
        Objects.equals(this.timespanAll, frontpage.timespanAll) &&
        Objects.equals(this.queries, frontpage.queries) &&
        Objects.equals(this.collection, frontpage.collection);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalCount, displayCount, mode, timespan, timespanAll, queries, collection);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Frontpage {\n");
    
    sb.append("    totalCount: ").append(toIndentedString(totalCount)).append("\n");
    sb.append("    displayCount: ").append(toIndentedString(displayCount)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    timespan: ").append(toIndentedString(timespan)).append("\n");
    sb.append("    timespanAll: ").append(toIndentedString(timespanAll)).append("\n");
    sb.append("    queries: ").append(toIndentedString(queries)).append("\n");
    sb.append("    collection: ").append(toIndentedString(collection)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

