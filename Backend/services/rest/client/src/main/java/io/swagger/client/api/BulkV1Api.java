/*
 * edu-sharing Repository REST API
 * The public restful API of the edu-sharing repository.
 *
 * OpenAPI spec version: 1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ErrorResponse;
import io.swagger.client.model.NodeEntry;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BulkV1Api {
    private ApiClient apiClient;

    public BulkV1Api() {
        this(Configuration.getDefaultApiClient());
    }

    public BulkV1Api(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for find
     * @param body properties that must match (with \&quot;AND\&quot; concatenated) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findCall(Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/bulk/v1/find";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findValidateBeforeCall(Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling find(Async)");
        }
        

        com.squareup.okhttp.Call call = findCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * gets a given node
     * Get a given node based on the posted, multiple criterias. Make sure that they&#39;ll provide an unique result
     * @param body properties that must match (with \&quot;AND\&quot; concatenated) (required)
     * @return NodeEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntry find(Object body) throws ApiException {
        ApiResponse<NodeEntry> resp = findWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * gets a given node
     * Get a given node based on the posted, multiple criterias. Make sure that they&#39;ll provide an unique result
     * @param body properties that must match (with \&quot;AND\&quot; concatenated) (required)
     * @return ApiResponse&lt;NodeEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntry> findWithHttpInfo(Object body) throws ApiException {
        com.squareup.okhttp.Call call = findValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * gets a given node (asynchronously)
     * Get a given node based on the posted, multiple criterias. Make sure that they&#39;ll provide an unique result
     * @param body properties that must match (with \&quot;AND\&quot; concatenated) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findAsync(Object body, final ApiCallback<NodeEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sync
     * @param group The group to which this node belongs to. Used for internal structuring. Please use simple names only (required)
     * @param match The properties that must match to identify if this node exists. Multiple properties will be and combined and compared (required)
     * @param type type of node. If the node already exists, this will not change the type afterwards (required)
     * @param body properties, they&#39;ll not get filtered via mds, so be careful what you add here (required)
     * @param groupBy The properties on which the imported nodes should be grouped (for each value, a folder with the corresponding data is created) (optional)
     * @param aspects aspects of node (optional)
     * @param resetVersion reset all versions (like a complete reimport), all data inside edu-sharing will be lost (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call syncCall(String group, List<String> match, String type, Object body, List<String> groupBy, List<String> aspects, Boolean resetVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/bulk/v1/sync/{group}"
            .replaceAll("\\{" + "group" + "\\}", apiClient.escapeString(group.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (match != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "match", match));
        if (groupBy != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "groupBy", groupBy));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (aspects != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "aspects", aspects));
        if (resetVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resetVersion", resetVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call syncValidateBeforeCall(String group, List<String> match, String type, Object body, List<String> groupBy, List<String> aspects, Boolean resetVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling sync(Async)");
        }
        
        // verify the required parameter 'match' is set
        if (match == null) {
            throw new ApiException("Missing the required parameter 'match' when calling sync(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling sync(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling sync(Async)");
        }
        

        com.squareup.okhttp.Call call = syncCall(group, match, type, body, groupBy, aspects, resetVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create or update a given node
     * Depending on the given \&quot;match\&quot; properties either a new node will be created or the existing one will be updated
     * @param group The group to which this node belongs to. Used for internal structuring. Please use simple names only (required)
     * @param match The properties that must match to identify if this node exists. Multiple properties will be and combined and compared (required)
     * @param type type of node. If the node already exists, this will not change the type afterwards (required)
     * @param body properties, they&#39;ll not get filtered via mds, so be careful what you add here (required)
     * @param groupBy The properties on which the imported nodes should be grouped (for each value, a folder with the corresponding data is created) (optional)
     * @param aspects aspects of node (optional)
     * @param resetVersion reset all versions (like a complete reimport), all data inside edu-sharing will be lost (optional)
     * @return NodeEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntry sync(String group, List<String> match, String type, Object body, List<String> groupBy, List<String> aspects, Boolean resetVersion) throws ApiException {
        ApiResponse<NodeEntry> resp = syncWithHttpInfo(group, match, type, body, groupBy, aspects, resetVersion);
        return resp.getData();
    }

    /**
     * Create or update a given node
     * Depending on the given \&quot;match\&quot; properties either a new node will be created or the existing one will be updated
     * @param group The group to which this node belongs to. Used for internal structuring. Please use simple names only (required)
     * @param match The properties that must match to identify if this node exists. Multiple properties will be and combined and compared (required)
     * @param type type of node. If the node already exists, this will not change the type afterwards (required)
     * @param body properties, they&#39;ll not get filtered via mds, so be careful what you add here (required)
     * @param groupBy The properties on which the imported nodes should be grouped (for each value, a folder with the corresponding data is created) (optional)
     * @param aspects aspects of node (optional)
     * @param resetVersion reset all versions (like a complete reimport), all data inside edu-sharing will be lost (optional)
     * @return ApiResponse&lt;NodeEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntry> syncWithHttpInfo(String group, List<String> match, String type, Object body, List<String> groupBy, List<String> aspects, Boolean resetVersion) throws ApiException {
        com.squareup.okhttp.Call call = syncValidateBeforeCall(group, match, type, body, groupBy, aspects, resetVersion, null, null);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create or update a given node (asynchronously)
     * Depending on the given \&quot;match\&quot; properties either a new node will be created or the existing one will be updated
     * @param group The group to which this node belongs to. Used for internal structuring. Please use simple names only (required)
     * @param match The properties that must match to identify if this node exists. Multiple properties will be and combined and compared (required)
     * @param type type of node. If the node already exists, this will not change the type afterwards (required)
     * @param body properties, they&#39;ll not get filtered via mds, so be careful what you add here (required)
     * @param groupBy The properties on which the imported nodes should be grouped (for each value, a folder with the corresponding data is created) (optional)
     * @param aspects aspects of node (optional)
     * @param resetVersion reset all versions (like a complete reimport), all data inside edu-sharing will be lost (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call syncAsync(String group, List<String> match, String type, Object body, List<String> groupBy, List<String> aspects, Boolean resetVersion, final ApiCallback<NodeEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = syncValidateBeforeCall(group, match, type, body, groupBy, aspects, resetVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
