basePath: /edu-sharing/rest
definitions:
  ACE:
    properties:
      authority:
        $ref: '#/definitions/Authority'
      editable:
        default: false
        type: boolean
      group:
        $ref: '#/definitions/GroupProfile'
      permissions:
        items:
          type: string
        type: array
      user:
        $ref: '#/definitions/UserProfile'
    required:
      - authority
      - permissions
    type: object
  ACL:
    properties:
      inherited:
        default: false
        type: boolean
      permissions:
        items:
          $ref: '#/definitions/ACE'
        type: array
    required:
      - inherited
      - permissions
    type: object
  About:
    properties:
      lastCacheUpdate:
        format: int64
        type: integer
      services:
        items:
          $ref: '#/definitions/Service'
        type: array
      themesUrl:
        type: string
      version:
        $ref: '#/definitions/ServiceVersion'
    required:
      - services
      - version
    type: object
  Admin:
    properties:
      statistics:
        $ref: '#/definitions/Statistics'
    type: object
  AdminStatistics:
    properties:
      activeLocks:
        items:
          $ref: '#/definitions/Node'
        type: array
      activeSessions:
        format: int32
        type: integer
      allocatedMemory:
        format: int64
        type: integer
      maxMemory:
        format: int64
        type: integer
      numberOfPreviews:
        format: int32
        type: integer
      previewCacheSize:
        format: int64
        type: integer
    type: object
  Application:
    properties:
      clientBaseUrl:
        type: string
      configUrl:
        type: string
      contentUrl:
        type: string
      file:
        type: string
      id:
        type: string
      repositoryType:
        type: string
      subtype:
        type: string
      title:
        type: string
      type:
        type: string
      webserverUrl:
        type: string
      xml:
        type: string
    type: object
  Audience:
    properties:
      name:
        type: string
    type: object
  AuthenticationToken:
    properties:
      ticket:
        type: string
      userId:
        type: string
    type: object
  Authority:
    properties:
      authorityName:
        type: string
      authorityType:
        enum:
          - USER
          - GROUP
          - OWNER
          - EVERYONE
          - GUEST
        type: string
      properties:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
    required:
      - authorityName
    type: object
  AuthorityEntries:
    properties:
      authorities:
        items:
          $ref: '#/definitions/Authority'
        type: array
      pagination:
        $ref: '#/definitions/Pagination'
    required:
      - authorities
      - pagination
    type: object
  AvailableMds:
    properties:
      mds:
        items:
          type: string
        type: array
      repository:
        type: string
    type: object
  Banner:
    properties:
      components:
        items:
          type: string
        type: array
      href:
        type: string
      url:
        type: string
    type: object
  CacheCluster:
    properties:
      availableProcessors:
        format: int32
        type: integer
      cacheInfos:
        items:
          $ref: '#/definitions/CacheInfo'
        type: array
      freeMemory:
        format: int64
        type: integer
      groupName:
        type: string
      instances:
        items:
          $ref: '#/definitions/CacheMember'
        type: array
      localMember:
        type: string
      maxMemory:
        format: int64
        type: integer
      timeStamp:
        format: date-time
        type: string
      totalMemory:
        format: int64
        type: integer
    type: object
  CacheInfo:
    properties:
      backupCount:
        format: int32
        type: integer
      backupEntryCount:
        format: int64
        type: integer
      backupEntryMemoryCost:
        format: int64
        type: integer
      getOwnedEntryMemoryCost:
        format: int64
        type: integer
      groupName:
        type: string
      heapCost:
        format: int64
        type: integer
      maxSize:
        format: int32
        type: integer
      member:
        type: string
      name:
        type: string
      ownedEntryCount:
        format: int64
        type: integer
      size:
        format: int32
        type: integer
      sizeInMemory:
        format: int64
        type: integer
      statisticHits:
        format: int64
        type: integer
    type: object
  CacheMember:
    properties:
      name:
        type: string
    type: object
  Catalog:
    properties:
      name:
        type: string
      url:
        type: string
    type: object
  Collection:
    properties:
      authorFreetext:
        type: string
      childCollectionsCount:
        format: int32
        type: integer
      childReferencesCount:
        format: int32
        type: integer
      color:
        type: string
      description:
        type: string
      fromUser:
        default: false
        description: 'false'
        type: boolean
      level0:
        default: false
        description: 'false'
        type: boolean
      orderMode:
        type: string
      pinned:
        default: false
        type: boolean
      scope:
        type: string
      title:
        type: string
      type:
        type: string
      viewtype:
        type: string
      x:
        format: int32
        type: integer
      y:
        format: int32
        type: integer
      z:
        format: int32
        type: integer
    required:
      - fromUser
      - level0
      - title
      - type
      - viewtype
    type: object
  CollectionCounts:
    properties:
      collections:
        items:
          $ref: '#/definitions/Element'
        type: array
      refs:
        items:
          $ref: '#/definitions/Element'
        type: array
    type: object
  CollectionEntries:
    properties:
      collections:
        items:
          $ref: '#/definitions/Node'
        type: array
      pagination:
        $ref: '#/definitions/Pagination'
    required:
      - collections
    type: object
  CollectionEntry:
    properties:
      collection:
        $ref: '#/definitions/Node'
    required:
      - collection
    type: object
  CollectionFeedback:
    properties:
      createdAt:
        format: date-time
        type: string
      creator:
        type: string
      feedback:
        additionalProperties:
          $ref: '#/definitions/Serializable'
        type: object
    type: object
  CollectionOptions:
    properties:
      privateCollections:
        enum:
          - none
          - assign
          - delete
        type: string
      publicCollections:
        enum:
          - none
          - assign
          - delete
        type: string
    type: object
  CollectionReference:
    properties:
      access:
        items:
          type: string
        type: array
      accessOriginal:
        items:
          type: string
        type: array
      aspects:
        items:
          type: string
        type: array
      collection:
        $ref: '#/definitions/Collection'
      commentCount:
        format: int32
        type: integer
      content:
        $ref: '#/definitions/Content'
      createdAt:
        format: date-time
        type: string
      createdBy:
        $ref: '#/definitions/Person'
      downloadUrl:
        type: string
      iconURL:
        type: string
      isDirectory:
        default: false
        type: boolean
      license:
        $ref: '#/definitions/License'
      mediatype:
        type: string
      metadataset:
        type: string
      mimetype:
        type: string
      modifiedAt:
        format: date-time
        type: string
      modifiedBy:
        $ref: '#/definitions/Person'
      name:
        type: string
      originalId:
        type: string
      originalRestrictedAccess:
        default: false
        type: boolean
      owner:
        $ref: '#/definitions/Person'
      parent:
        $ref: '#/definitions/NodeRef'
      preview:
        $ref: '#/definitions/Preview'
      properties:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      rating:
        $ref: '#/definitions/RatingDetails'
      ref:
        $ref: '#/definitions/NodeRef'
      remote:
        $ref: '#/definitions/Remote'
      repositoryType:
        type: string
      size:
        type: string
      title:
        type: string
      type:
        type: string
      usedInCollections:
        items:
          $ref: '#/definitions/Node'
        type: array
    required:
      - access
      - collection
      - createdAt
      - createdBy
      - downloadUrl
      - name
      - owner
      - ref
    type: object
  Collections:
    properties:
      colors:
        items:
          type: string
        type: array
    type: object
  CollectionsResult:
    properties:
      count:
        format: int32
        type: integer
    type: object
  ColumnV2:
    properties:
      format:
        type: string
      id:
        type: string
      showDefault:
        default: false
        type: boolean
    type: object
  Comment:
    properties:
      comment:
        type: string
      created:
        format: int64
        type: integer
      creator:
        $ref: '#/definitions/UserSimple'
      ref:
        $ref: '#/definitions/NodeRef'
      replyTo:
        $ref: '#/definitions/NodeRef'
    type: object
  Comments:
    properties:
      comments:
        items:
          $ref: '#/definitions/Comment'
        type: array
    type: object
  Condition:
    properties:
      negate:
        default: false
        type: boolean
      type:
        enum:
          - TOOLPERMISSION
        type: string
      value:
        type: string
    type: object
  Config:
    properties:
      current:
        $ref: '#/definitions/Values'
      global:
        $ref: '#/definitions/Values'
      language:
        $ref: '#/definitions/Language'
    type: object
  ConfigFrontpage:
    properties:
      enabled:
        default: false
        type: boolean
    type: object
  ConfigPrivacy:
    properties:
      cookieDisclaimer:
        default: false
        type: boolean
    type: object
  ConfigRemote:
    properties:
      rocketchat:
        $ref: '#/definitions/ConfigRemoteRocketchat'
    type: object
  ConfigRemoteRocketchat:
    type: object
  ConfigUpload:
    properties:
      postDialog:
        enum:
          - SimpleEdit
          - Mds
        type: string
    type: object
  ConfigWorkflow:
    properties:
      commentRequired:
        default: false
        type: boolean
      defaultReceiver:
        type: string
      defaultStatus:
        type: string
      workflows:
        items:
          $ref: '#/definitions/ConfigWorkflowList'
        type: array
    type: object
  ConfigWorkflowList:
    properties:
      color:
        type: string
      hasReceiver:
        default: false
        type: boolean
      id:
        type: string
      next:
        items:
          type: string
        type: array
    type: object
  Connector:
    properties:
      filetypes:
        items:
          $ref: '#/definitions/ConnectorFileType'
        type: array
      hasViewMode:
        default: false
        type: boolean
      icon:
        type: string
      id:
        type: string
      onlyDesktop:
        default: false
        type: boolean
      parameters:
        items:
          type: string
        type: array
      showNew:
        default: false
        description: 'false'
        type: boolean
    required:
      - showNew
    type: object
  ConnectorFileType:
    properties:
      ccresourcesubtype:
        type: string
      ccressourcetype:
        type: string
      ccressourceversion:
        type: string
      creatable:
        default: false
        type: boolean
      editable:
        default: false
        type: boolean
      editorType:
        type: string
      filetype:
        type: string
      mimetype:
        type: string
    type: object
  ConnectorList:
    properties:
      connectors:
        items:
          $ref: '#/definitions/Connector'
        type: array
      url:
        type: string
    type: object
  Content:
    properties:
      hash:
        type: string
      url:
        type: string
      version:
        type: string
    type: object
  ContextMenuEntry:
    properties:
      ajax:
        default: false
        type: boolean
      changeStrategy:
        enum:
          - update
          - remove
        type: string
      group:
        type: string
      icon:
        type: string
      isDirectory:
        default: false
        type: boolean
      isDisabled:
        default: false
        type: boolean
      isSeparate:
        default: false
        type: boolean
      isSeparateBottom:
        default: false
        type: boolean
      mode:
        type: string
      multiple:
        default: false
        type: boolean
      name:
        type: string
      onlyDesktop:
        default: false
        type: boolean
      onlyWeb:
        default: false
        type: boolean
      openInNew:
        default: false
        type: boolean
      permission:
        type: string
      position:
        format: int32
        type: integer
      scopes:
        items:
          enum:
            - Render
            - Search
            - CollectionsReferences
            - CollectionsCollection
            - WorkspaceList
            - WorkspaceTree
            - Oer
            - CreateMenu
          type: string
        type: array
      showAsAction:
        default: false
        type: boolean
      toolpermission:
        type: string
      url:
        type: string
    type: object
  Counts:
    properties:
      elements:
        items:
          $ref: '#/definitions/Element'
        type: array
    type: object
  Create:
    properties:
      onlyMetadata:
        default: false
        type: boolean
    type: object
  DeleteOption:
    properties:
      delete:
        default: false
        type: boolean
    type: object
  DynamicConfig:
    properties:
      nodeId:
        type: string
      value:
        type: string
    type: object
  Element:
    properties:
      id:
        type: string
      name:
        type: string
      type:
        type: string
    type: object
  ErrorResponse:
    properties:
      error:
        type: string
      logLevel:
        type: string
      message:
        type: string
      stacktraceArray:
        items:
          type: string
        readOnly: true
        type: array
    required:
      - error
      - message
      - stacktraceArray
    type: object
  ExcelResult:
    properties:
      rows:
        format: int32
        type: integer
    type: object
  Facette:
    properties:
      property:
        type: string
      values:
        items:
          $ref: '#/definitions/Value'
        type: array
    required:
      - property
      - values
    type: object
  Filter:
    properties:
      entries:
        items:
          $ref: '#/definitions/FilterEntry'
        type: array
    required:
      - entries
    type: object
  FilterEntry:
    properties:
      property:
        type: string
      values:
        items:
          type: string
        type: array
    required:
      - property
      - values
    type: object
  FontIcon:
    properties:
      original:
        type: string
      replace:
        type: string
    type: object
  Frontpage:
    properties:
      collection:
        type: string
      displayCount:
        format: int32
        type: integer
      mode:
        enum:
          - collection
          - rating
          - views
          - downloads
        type: string
      queries:
        items:
          $ref: '#/definitions/Query'
        type: array
      timespan:
        format: int32
        type: integer
      timespanAll:
        default: false
        type: boolean
      totalCount:
        format: int32
        type: integer
    type: object
  General:
    properties:
      referencedInInstance:
        type: string
      referencedInName:
        type: string
      referencedInType:
        type: string
    type: object
  Geo:
    properties:
      addressCountry:
        type: string
      latitude:
        format: double
        type: number
      longitude:
        format: double
        type: number
    type: object
  Group:
    properties:
      aspects:
        items:
          type: string
        type: array
      authorityName:
        type: string
      authorityType:
        enum:
          - USER
          - GROUP
          - OWNER
          - EVERYONE
          - GUEST
        type: string
      editable:
        default: false
        type: boolean
      groupName:
        type: string
      organizations:
        items:
          $ref: '#/definitions/Organization'
        type: array
      profile:
        $ref: '#/definitions/GroupProfile'
      properties:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      ref:
        $ref: '#/definitions/NodeRef'
      signupMethod:
        enum:
          - simple
          - password
          - list
        type: string
    required:
      - authorityName
    type: object
  GroupEntries:
    properties:
      groups:
        items:
          $ref: '#/definitions/Group'
        type: array
      pagination:
        $ref: '#/definitions/Pagination'
    required:
      - groups
      - pagination
    type: object
  GroupEntry:
    properties:
      group:
        $ref: '#/definitions/Group'
    required:
      - group
    type: object
  GroupProfile:
    properties:
      displayName:
        type: string
      groupEmail:
        type: string
      groupType:
        type: string
      scopeType:
        type: string
    type: object
  GroupSignupDetails:
    properties:
      signupMethod:
        enum:
          - simple
          - password
          - list
        type: string
      signupPassword:
        type: string
    type: object
  GroupV2:
    properties:
      id:
        type: string
      rendering:
        enum:
          - legacy
          - angular
        type: string
      views:
        items:
          type: string
        type: array
    type: object
  Guest:
    properties:
      enabled:
        default: false
        type: boolean
    type: object
  HelpMenuOptions:
    properties:
      icon:
        type: string
      key:
        type: string
      url:
        type: string
    type: object
  HomeFolderOptions:
    properties:
      ccFiles:
        enum:
          - none
          - assign
          - delete
        type: string
      folders:
        enum:
          - none
          - assign
        type: string
      keepFolderStructure:
        default: false
        type: boolean
      privateFiles:
        enum:
          - none
          - assign
          - delete
        type: string
    type: object
  Icon:
    properties:
      url:
        type: string
    type: object
  Image:
    properties:
      replace:
        type: string
      src:
        type: string
    type: object
  Interface:
    properties:
      documentation:
        type: string
      format:
        enum:
          - Json
          - XML
          - Text
        type: string
      metadataPrefix:
        type: string
      set:
        type: string
      type:
        enum:
          - Search
          - Sitemap
          - Statistics
          - OAI
          - Generic_Api
        type: string
      url:
        type: string
    type: object
  JobDescription:
    properties:
      description:
        type: string
      name:
        type: string
      params:
        items:
          $ref: '#/definitions/JobFieldDescription'
        type: array
    type: object
  JobDetail:
    properties:
      description:
        type: string
      durable:
        default: false
        type: boolean
      fullName:
        type: string
      group:
        type: string
      jobDataMap:
        additionalProperties:
          type: object
        type: object
      jobListenerNames:
        items:
          type: string
        type: array
      key:
        $ref: '#/definitions/Key'
      name:
        type: string
      stateful:
        default: false
        type: boolean
      volatile:
        default: false
        type: boolean
    type: object
  JobFieldDescription:
    properties:
      description:
        type: string
      file:
        default: false
        type: boolean
      name:
        type: string
      sampleValue:
        type: string
      values:
        items:
          $ref: '#/definitions/JobFieldDescription'
        type: array
    type: object
  JobInfo:
    properties:
      finishTime:
        format: int64
        type: integer
      jobDetail:
        $ref: '#/definitions/JobDetail'
      log:
        items:
          $ref: '#/definitions/LogEntry'
        type: array
      startTime:
        format: int64
        type: integer
      status:
        enum:
          - Running
          - Failed
          - Aborted
          - Finished
        type: string
      worstLevel:
        $ref: '#/definitions/Level'
    type: object
  Key:
    properties:
      first:
        type: object
      group:
        type: string
      name:
        type: string
      second:
        type: object
    type: object
  KeyValuePair:
    properties:
      key:
        type: string
        xml:
          attribute: true
      value:
        type: string
    type: object
  Language:
    properties:
      current:
        additionalProperties:
          type: string
        type: object
      currentLanguage:
        type: string
      global:
        additionalProperties:
          type: string
        type: object
    type: object
  Level:
    properties:
      syslogEquivalent:
        format: int32
        type: integer
    type: object
  License:
    properties:
      icon:
        type: string
      url:
        type: string
    type: object
  LicenseAgreement:
    properties:
      nodeId:
        items:
          $ref: '#/definitions/LicenseAgreementNode'
        type: array
    type: object
  LicenseAgreementNode:
    properties:
      language:
        type: string
        xml:
          attribute: true
      value:
        type: string
    type: object
  ListV2:
    properties:
      columns:
        items:
          $ref: '#/definitions/ColumnV2'
        type: array
      id:
        type: string
    type: object
  Location:
    properties:
      geo:
        $ref: '#/definitions/Geo'
    type: object
  LogEntry:
    properties:
      className:
        type: string
      date:
        format: int64
        type: integer
      level:
        $ref: '#/definitions/Level'
      message:
        type: string
    type: object
  Login:
    properties:
      authorityName:
        type: string
      currentScope:
        type: string
      isAdmin:
        default: false
        type: boolean
      isGuest:
        default: false
        type: boolean
      isValidLogin:
        default: false
        type: boolean
      remoteAuthentications:
        additionalProperties:
          $ref: '#/definitions/RemoteAuthDescription'
        readOnly: true
        type: object
      sessionTimeout:
        format: int32
        type: integer
      statusCode:
        readOnly: true
        type: string
      toolPermissions:
        items:
          type: string
        type: array
      userHome:
        readOnly: true
        type: string
    required:
      - currentScope
      - isAdmin
      - isGuest
      - isValidLogin
      - sessionTimeout
    type: object
  LoginCredentials:
    properties:
      password:
        type: string
      scope:
        type: string
      userName:
        type: string
    required:
      - password
      - scope
      - userName
    type: object
  LogoutInfo:
    properties:
      ajax:
        default: false
        type: boolean
      destroySession:
        default: false
        type: boolean
      next:
        type: string
      url:
        type: string
    type: object
  Mainnav:
    properties:
      icon:
        $ref: '#/definitions/Icon'
      mainMenuStyle:
        type: string
    type: object
  McOrgConnectResult:
    properties:
      rows:
        format: int32
        type: integer
    type: object
  Mds:
    properties:
      forms:
        items:
          $ref: '#/definitions/MdsForm'
        type: array
      lists:
        items:
          $ref: '#/definitions/MdsList'
        type: array
      queries:
        $ref: '#/definitions/MdsQueries'
      ref:
        $ref: '#/definitions/MdsRef'
      types:
        items:
          $ref: '#/definitions/MdsType'
        type: array
      views:
        items:
          $ref: '#/definitions/MdsView'
        type: array
    required:
      - forms
      - lists
      - queries
      - ref
      - types
      - views
    type: object
  MdsEntriesV2:
    properties:
      metadatasets:
        items:
          $ref: '#/definitions/MetadataSetInfo'
        type: array
    type: object
  MdsEntry:
    properties:
      mds:
        $ref: '#/definitions/Mds'
    required:
      - mds
    type: object
  MdsForm:
    properties:
      id:
        type: string
      panels:
        items:
          $ref: '#/definitions/MdsFormPanel'
        type: array
    required:
      - id
      - panels
    type: object
  MdsFormPanel:
    properties:
      label:
        type: string
      layout:
        type: string
      multiUpload:
        default: false
        type: boolean
      name:
        type: string
      onCreate:
        default: false
        type: boolean
      onUpdate:
        default: false
        type: boolean
      order:
        type: string
      properties:
        items:
          $ref: '#/definitions/MdsFormProperty'
        type: array
      styleName:
        type: string
    required:
      - label
      - layout
      - multiUpload
      - name
      - onCreate
      - onUpdate
      - order
      - properties
      - styleName
    type: object
  MdsFormProperty:
    properties:
      copyFrom:
        items:
          type: string
        type: array
      defaultValues:
        items:
          type: string
        type: array
      formHeight:
        type: string
      formLength:
        type: string
      label:
        type: string
      labelHint:
        type: string
      multiple:
        default: false
        type: boolean
      name:
        type: string
      parameters:
        items:
          $ref: '#/definitions/MdsFormPropertyParameter'
        type: array
      placeHolder:
        type: string
      styleName:
        type: string
      styleNameLabel:
        type: string
      type:
        type: string
      validators:
        items:
          type: string
        type: array
      values:
        items:
          $ref: '#/definitions/MdsFormPropertyValue'
        type: array
      widget:
        type: string
      widgetTitle:
        type: string
    required:
      - copyFrom
      - defaultValues
      - formHeight
      - formLength
      - label
      - labelHint
      - multiple
      - name
      - parameters
      - placeHolder
      - styleName
      - styleNameLabel
      - type
      - validators
      - values
      - widget
      - widgetTitle
    type: object
  MdsFormPropertyParameter:
    properties:
      name:
        type: string
      value:
        type: string
    required:
      - name
      - value
    type: object
  MdsFormPropertyValue:
    properties:
      key:
        type: string
      value:
        type: string
    required:
      - key
      - value
    type: object
  MdsList:
    properties:
      id:
        type: string
      label:
        type: string
      properties:
        items:
          $ref: '#/definitions/MdsListProperty'
        type: array
    required:
      - id
      - label
      - properties
    type: object
  MdsListProperty:
    properties:
      copyFrom:
        items:
          type: string
        type: array
      defaultValues:
        items:
          type: string
        type: array
      formHeight:
        type: string
      formLength:
        type: string
      label:
        type: string
      labelHint:
        type: string
      multiple:
        default: false
        type: boolean
      name:
        type: string
      parameters:
        items:
          $ref: '#/definitions/MdsListPropertyParameter'
        type: array
      placeHolder:
        type: string
      styleName:
        type: string
      styleNameLabel:
        type: string
      type:
        type: string
      values:
        items:
          $ref: '#/definitions/MdsListPropertyValue'
        type: array
      widget:
        type: string
      widgetTitle:
        type: string
    required:
      - copyFrom
      - defaultValues
      - formHeight
      - formLength
      - label
      - labelHint
      - multiple
      - name
      - parameters
      - placeHolder
      - styleName
      - styleNameLabel
      - type
      - values
      - widget
      - widgetTitle
    type: object
  MdsListPropertyParameter:
    properties:
      name:
        type: string
      value:
        type: string
    required:
      - name
      - value
    type: object
  MdsListPropertyValue:
    properties:
      key:
        type: string
      value:
        type: string
    required:
      - key
      - value
    type: object
  MdsProperty:
    properties:
      concatewithtype:
        default: false
        type: boolean
      copyFrom:
        type: string
      defaultValue:
        type: string
      keyContenturl:
        type: string
      multiple:
        default: false
        type: boolean
      name:
        type: string
      processtype:
        type: string
      type:
        type: string
    required:
      - concatewithtype
      - copyFrom
      - defaultValue
      - keyContenturl
      - multiple
      - name
      - processtype
      - type
    type: object
  MdsQueries:
    properties:
      baseQuery:
        type: string
      queries:
        items:
          $ref: '#/definitions/MdsQuery'
        type: array
    required:
      - baseQuery
      - queries
    type: object
  MdsQuery:
    properties:
      criteriaboxid:
        type: string
      handlerclass:
        type: string
      join:
        type: string
      label:
        type: string
      layout:
        type: string
      properties:
        items:
          $ref: '#/definitions/MdsQueryProperty'
        type: array
      statement:
        type: string
      stylename:
        type: string
      widget:
        type: string
    required:
      - criteriaboxid
      - handlerclass
      - join
      - label
      - layout
      - properties
      - statement
      - stylename
      - widget
    type: object
  MdsQueryCriteria:
    properties:
      property:
        type: string
      values:
        items:
          type: string
        type: array
    required:
      - property
      - values
    type: object
  MdsQueryProperty:
    properties:
      copyFrom:
        items:
          type: string
        type: array
      defaultValues:
        items:
          type: string
        type: array
      formHeight:
        type: string
      formLength:
        type: string
      initByGetParam:
        type: string
      label:
        type: string
      labelHint:
        type: string
      multiple:
        default: false
        type: boolean
      multipleJoin:
        type: string
      name:
        type: string
      parameters:
        items:
          $ref: '#/definitions/MdsQueryPropertyParameter'
        type: array
      placeHolder:
        type: string
      statement:
        type: string
      styleName:
        type: string
      styleNameLabel:
        type: string
      toogle:
        default: false
        type: boolean
      type:
        type: string
      validators:
        items:
          type: string
        type: array
      values:
        items:
          $ref: '#/definitions/MdsQueryPropertyValue'
        type: array
      widget:
        type: string
      widgetTitle:
        type: string
    required:
      - copyFrom
      - defaultValues
      - formHeight
      - formLength
      - initByGetParam
      - label
      - labelHint
      - multiple
      - multipleJoin
      - name
      - parameters
      - placeHolder
      - statement
      - styleName
      - styleNameLabel
      - toogle
      - type
      - validators
      - values
      - widget
      - widgetTitle
    type: object
  MdsQueryPropertyParameter:
    properties:
      name:
        type: string
      value:
        type: string
    required:
      - name
      - value
    type: object
  MdsQueryPropertyValue:
    properties:
      key:
        type: string
      value:
        type: string
    required:
      - key
      - value
    type: object
  MdsRef:
    properties:
      id:
        type: string
      repo:
        type: string
    required:
      - id
      - repo
    type: object
  MdsType:
    properties:
      properties:
        items:
          $ref: '#/definitions/MdsProperty'
        type: array
      type:
        type: string
    required:
      - properties
      - type
    type: object
  MdsV2:
    properties:
      create:
        $ref: '#/definitions/Create'
      groups:
        items:
          $ref: '#/definitions/GroupV2'
        type: array
      lists:
        items:
          $ref: '#/definitions/ListV2'
        type: array
      name:
        type: string
      sorts:
        items:
          $ref: '#/definitions/SortV2'
        type: array
      views:
        items:
          $ref: '#/definitions/ViewV2'
        type: array
      widgets:
        items:
          $ref: '#/definitions/WidgetV2'
        type: array
    type: object
  MdsView:
    properties:
      id:
        type: string
      properties:
        items:
          $ref: '#/definitions/MdsViewProperty'
        type: array
    required:
      - id
      - properties
    type: object
  MdsViewProperty:
    properties:
      copyFrom:
        items:
          type: string
        type: array
      defaultValues:
        items:
          type: string
        type: array
      formHeight:
        type: string
      formLength:
        type: string
      label:
        type: string
      labelHint:
        type: string
      multiple:
        default: false
        type: boolean
      name:
        type: string
      parameters:
        items:
          $ref: '#/definitions/MdsViewPropertyParameter'
        type: array
      placeHolder:
        type: string
      styleName:
        type: string
      styleNameLabel:
        type: string
      type:
        type: string
      values:
        items:
          $ref: '#/definitions/MdsViewPropertyValue'
        type: array
      widget:
        type: string
      widgetTitle:
        type: string
    required:
      - copyFrom
      - defaultValues
      - formHeight
      - formLength
      - label
      - labelHint
      - multiple
      - name
      - parameters
      - placeHolder
      - styleName
      - styleNameLabel
      - type
      - values
      - widget
      - widgetTitle
    type: object
  MdsViewPropertyParameter:
    properties:
      name:
        type: string
      value:
        type: string
    required:
      - name
      - value
    type: object
  MdsViewPropertyValue:
    properties:
      key:
        type: string
      value:
        type: string
    required:
      - key
      - value
    type: object
  Mediacenter:
    properties:
      administrationAccess:
        default: false
        type: boolean
      aspects:
        items:
          type: string
        type: array
      authorityName:
        type: string
      authorityType:
        enum:
          - USER
          - GROUP
          - OWNER
          - EVERYONE
          - GUEST
        type: string
      editable:
        default: false
        type: boolean
      groupName:
        type: string
      organizations:
        items:
          $ref: '#/definitions/Organization'
        type: array
      profile:
        $ref: '#/definitions/GroupProfile'
      properties:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      ref:
        $ref: '#/definitions/NodeRef'
      signupMethod:
        enum:
          - simple
          - password
          - list
        type: string
    required:
      - authorityName
    type: object
  MediacenterProfileExtension:
    properties:
      catalogs:
        items:
          $ref: '#/definitions/Catalog'
        type: array
      contentStatus:
        enum:
          - Activated
          - Deactivated
        type: string
      districtAbbreviation:
        type: string
      id:
        type: string
      location:
        type: string
      mainUrl:
        type: string
    type: object
  MediacentersImportResult:
    properties:
      rows:
        format: int32
        type: integer
    type: object
  MenuEntry:
    properties:
      icon:
        type: string
      isDisabled:
        default: false
        type: boolean
      isSeparate:
        default: false
        type: boolean
      isSeparateBottom:
        default: false
        type: boolean
      name:
        type: string
      onlyDesktop:
        default: false
        type: boolean
      onlyWeb:
        default: false
        type: boolean
      openInNew:
        default: false
        type: boolean
      path:
        type: string
      position:
        format: int32
        type: integer
      scope:
        type: string
      url:
        type: string
    type: object
  MetadataSetInfo:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  Node:
    properties:
      access:
        items:
          type: string
        type: array
      aspects:
        items:
          type: string
        type: array
      collection:
        $ref: '#/definitions/Collection'
      commentCount:
        format: int32
        type: integer
      content:
        $ref: '#/definitions/Content'
      createdAt:
        format: date-time
        type: string
      createdBy:
        $ref: '#/definitions/Person'
      downloadUrl:
        type: string
      iconURL:
        type: string
      isDirectory:
        default: false
        type: boolean
      license:
        $ref: '#/definitions/License'
      mediatype:
        type: string
      metadataset:
        type: string
      mimetype:
        type: string
      modifiedAt:
        format: date-time
        type: string
      modifiedBy:
        $ref: '#/definitions/Person'
      name:
        type: string
      owner:
        $ref: '#/definitions/Person'
      parent:
        $ref: '#/definitions/NodeRef'
      preview:
        $ref: '#/definitions/Preview'
      properties:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      rating:
        $ref: '#/definitions/RatingDetails'
      ref:
        $ref: '#/definitions/NodeRef'
      remote:
        $ref: '#/definitions/Remote'
      repositoryType:
        type: string
      size:
        type: string
      title:
        type: string
      type:
        type: string
      usedInCollections:
        items:
          $ref: '#/definitions/Node'
        type: array
    required:
      - access
      - collection
      - createdAt
      - createdBy
      - downloadUrl
      - name
      - owner
      - ref
    type: object
  NodeData:
    properties:
      counts:
        additionalProperties:
          format: int32
          type: integer
        type: object
      timestamp:
        type: string
    type: object
  NodeEntries:
    properties:
      nodes:
        items:
          $ref: '#/definitions/Node'
        type: array
      pagination:
        $ref: '#/definitions/Pagination'
    required:
      - nodes
      - pagination
    type: object
  NodeEntry:
    properties:
      node:
        $ref: '#/definitions/Node'
    required:
      - node
    type: object
  NodeLocked:
    properties:
      isLocked:
        default: false
        type: boolean
    required:
      - isLocked
    type: object
  NodePermissionEntry:
    properties:
      permissions:
        $ref: '#/definitions/NodePermissions'
    required:
      - permissions
    type: object
  NodePermissions:
    properties:
      inheritedPermissions:
        items:
          $ref: '#/definitions/ACE'
        type: array
      localPermissions:
        $ref: '#/definitions/ACL'
    required:
      - inheritedPermissions
      - localPermissions
    type: object
  NodeRef:
    properties:
      archived:
        default: false
        type: boolean
      id:
        type: string
      isHomeRepo:
        default: false
        type: boolean
      repo:
        type: string
    required:
      - archived
      - id
      - repo
    type: object
  NodeRemote:
    properties:
      node:
        $ref: '#/definitions/Node'
      remote:
        $ref: '#/definitions/Node'
    required:
      - node
      - remote
    type: object
  NodeShare:
    properties:
      downloadCount:
        format: int32
        type: integer
      email:
        type: string
      expiryDate:
        format: int64
        type: integer
      invitedAt:
        format: int64
        type: integer
      password:
        default: false
        type: boolean
      shareId:
        type: string
      token:
        type: string
      url:
        type: string
    type: object
  NodeText:
    properties:
      html:
        type: string
      raw:
        type: string
      text:
        type: string
    type: object
  NodeVersion:
    properties:
      comment:
        type: string
      contentUrl:
        type: string
      modifiedAt:
        type: string
      modifiedBy:
        $ref: '#/definitions/Person'
      properties:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      version:
        $ref: '#/definitions/NodeVersionRef'
    required:
      - comment
      - modifiedAt
      - modifiedBy
      - version
    type: object
  NodeVersionEntry:
    properties:
      version:
        $ref: '#/definitions/NodeVersion'
    required:
      - version
    type: object
  NodeVersionRef:
    properties:
      major:
        format: int32
        type: integer
      minor:
        format: int32
        type: integer
      node:
        $ref: '#/definitions/NodeRef'
    required:
      - major
      - minor
      - node
    type: object
  NodeVersionRefEntries:
    properties:
      versions:
        items:
          $ref: '#/definitions/NodeVersionRef'
        type: array
    required:
      - versions
    type: object
  NotifyEntry:
    properties:
      action:
        type: string
      date:
        format: int64
        type: integer
      permissions:
        $ref: '#/definitions/ACL'
      user:
        $ref: '#/definitions/User'
    required:
      - action
      - date
      - permissions
      - user
    type: object
  OrganisationsImportResult:
    properties:
      rows:
        format: int32
        type: integer
    type: object
  Organization:
    properties:
      administrationAccess:
        default: false
        type: boolean
      aspects:
        items:
          type: string
        type: array
      authorityName:
        type: string
      authorityType:
        enum:
          - USER
          - GROUP
          - OWNER
          - EVERYONE
          - GUEST
        type: string
      editable:
        default: false
        type: boolean
      groupName:
        type: string
      organizations:
        items:
          $ref: '#/definitions/Organization'
        type: array
      profile:
        $ref: '#/definitions/GroupProfile'
      properties:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      ref:
        $ref: '#/definitions/NodeRef'
      sharedFolder:
        $ref: '#/definitions/NodeRef'
      signupMethod:
        enum:
          - simple
          - password
          - list
        type: string
    required:
      - authorityName
    type: object
  OrganizationEntries:
    properties:
      canCreate:
        default: false
        type: boolean
      organizations:
        items:
          $ref: '#/definitions/Organization'
        type: array
      pagination:
        $ref: '#/definitions/Pagination'
    required:
      - organizations
      - pagination
    type: object
  Pagination:
    properties:
      count:
        format: int32
        type: integer
      from:
        format: int32
        type: integer
      total:
        format: int32
        type: integer
    required:
      - count
      - from
      - total
    type: object
  Parameters:
    properties:
      general:
        $ref: '#/definitions/General'
    type: object
    xml:
      name: usage
  ParentEntries:
    properties:
      nodes:
        items:
          $ref: '#/definitions/Node'
        type: array
      pagination:
        $ref: '#/definitions/Pagination'
      scope:
        type: string
    required:
      - nodes
      - pagination
    type: object
  Person:
    properties:
      firstName:
        type: string
      lastName:
        type: string
      mailbox:
        type: string
      profile:
        $ref: '#/definitions/UserProfile'
    type: object
  PersonDeleteOptions:
    properties:
      cleanupMetadata:
        default: false
        type: boolean
      collectionFeedback:
        $ref: '#/definitions/DeleteOption'
      collections:
        $ref: '#/definitions/CollectionOptions'
      comments:
        $ref: '#/definitions/DeleteOption'
      homeFolder:
        $ref: '#/definitions/HomeFolderOptions'
      ratings:
        $ref: '#/definitions/DeleteOption'
      receiver:
        type: string
      receiverGroup:
        type: string
      sharedFolders:
        $ref: '#/definitions/SharedFolderOptions'
      statistics:
        $ref: '#/definitions/DeleteOption'
      stream:
        $ref: '#/definitions/DeleteOption'
    type: object
  PersonDeleteResult:
    properties:
      authorityName:
        type: string
      collectionFeedback:
        format: int32
        type: integer
      collections:
        $ref: '#/definitions/CollectionCounts'
      comments:
        format: int32
        type: integer
      deletedName:
        type: string
      homeFolder:
        additionalProperties:
          $ref: '#/definitions/Counts'
        type: object
      ratings:
        format: int32
        type: integer
      sharedFolders:
        additionalProperties:
          $ref: '#/definitions/Counts'
        type: object
      stream:
        format: int32
        type: integer
    type: object
  PersonReport:
    properties:
      options:
        $ref: '#/definitions/PersonDeleteOptions'
      results:
        items:
          $ref: '#/definitions/PersonDeleteResult'
        type: array
    type: object
  Preferences:
    properties:
      preferences:
        type: string
    type: object
  Preview:
    properties:
      data:
        items:
          format: byte
          type: string
        type: array
      height:
        format: int32
        type: integer
      isGenerated:
        default: false
        type: boolean
      isIcon:
        default: false
        type: boolean
      mimetype:
        type: string
      type:
        type: string
      url:
        type: string
      width:
        format: int32
        type: integer
    required:
      - height
      - isIcon
      - url
      - width
    type: object
  Profile:
    properties:
      displayName:
        type: string
      groupEmail:
        type: string
      groupType:
        type: string
      mediacenter:
        $ref: '#/definitions/MediacenterProfileExtension'
      scopeType:
        type: string
    type: object
  ProfileSettings:
    properties:
      showEmail:
        default: false
        description: 'false'
        type: boolean
    required:
      - showEmail
    type: object
  Provider:
    properties:
      areaServed:
        enum:
          - Organization
          - City
          - State
          - Country
          - Continent
          - World
        type: string
      email:
        type: string
      legalName:
        type: string
      location:
        $ref: '#/definitions/Location'
      url:
        type: string
    type: object
  Query:
    properties:
      condition:
        $ref: '#/definitions/Condition'
      query:
        type: string
    type: object
  RatingData:
    properties:
      count:
        format: int64
        type: integer
      rating:
        format: double
        type: number
      sum:
        format: double
        type: number
    type: object
  RatingDetails:
    properties:
      affiliation:
        additionalProperties:
          $ref: '#/definitions/RatingData'
        type: object
      overall:
        $ref: '#/definitions/RatingData'
      user:
        format: double
        type: number
    type: object
  ReferenceEntries:
    properties:
      pagination:
        $ref: '#/definitions/Pagination'
      references:
        items:
          $ref: '#/definitions/CollectionReference'
        type: array
    required:
      - references
    type: object
  Register:
    properties:
      local:
        default: false
        type: boolean
      loginUrl:
        type: string
      recoverPassword:
        default: false
        type: boolean
      recoverUrl:
        type: string
      requiredFields:
        items:
          type: string
        type: array
    type: object
  RegisterExists:
    properties:
      exists:
        default: false
        type: boolean
    type: object
  RegisterInformation:
    properties:
      allowNotifications:
        default: false
        type: boolean
      authorityName:
        type: string
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      organization:
        type: string
      password:
        type: string
    type: object
  Remote:
    properties:
      id:
        type: string
      repository:
        $ref: '#/definitions/Repo'
    type: object
  RemoteAuthDescription:
    properties:
      token:
        type: string
      url:
        type: string
    type: object
  Rendering:
    type: object
  RenderingDetailsEntry:
    properties:
      detailsSnippet:
        type: string
      mimeType:
        type: string
      node:
        $ref: '#/definitions/Node'
    required:
      - detailsSnippet
      - mimeType
      - node
    type: object
  Repo:
    properties:
      icon:
        type: string
      id:
        type: string
      isHomeRepo:
        default: false
        type: boolean
      logo:
        type: string
      renderingSupported:
        default: false
        type: boolean
      repositoryType:
        type: string
      title:
        type: string
    type: object
  RepoEntries:
    properties:
      repositories:
        items:
          $ref: '#/definitions/Repo'
        type: array
    required:
      - repositories
    type: object
  RepositoryConfig:
    properties:
      frontpage:
        $ref: '#/definitions/Frontpage'
    type: object
  RestoreResult:
    properties:
      archiveNodeId:
        type: string
      name:
        type: string
      nodeId:
        type: string
      parent:
        type: string
      path:
        type: string
      restoreStatus:
        type: string
    required:
      - archiveNodeId
      - name
      - nodeId
      - parent
      - path
      - restoreStatus
    type: object
  RestoreResults:
    properties:
      results:
        items:
          $ref: '#/definitions/RestoreResult'
        type: array
    required:
      - results
    type: object
  SearchParameters:
    properties:
      criterias:
        items:
          $ref: '#/definitions/MdsQueryCriteria'
        type: array
      facettes:
        items:
          type: string
        type: array
      permissions:
        items:
          type: string
        type: array
      resolveCollections:
        default: false
        type: boolean
    required:
      - criterias
      - facettes
    type: object
  SearchResult:
    properties:
      facettes:
        items:
          $ref: '#/definitions/Facette'
        type: array
      nodes:
        items:
          $ref: '#/definitions/Node'
        type: array
      pagination:
        $ref: '#/definitions/Pagination'
    required:
      - facettes
      - nodes
      - pagination
    type: object
  SearchResultElastic:
    properties:
      elasticResponse:
        type: string
      facettes:
        items:
          $ref: '#/definitions/Facette'
        type: array
      ignored:
        items:
          type: string
        type: array
      nodes:
        items:
          type: object
        type: array
      pagination:
        $ref: '#/definitions/Pagination'
    required:
      - facettes
      - nodes
      - pagination
    type: object
  SearchResultNode:
    properties:
      facettes:
        items:
          $ref: '#/definitions/Facette'
        type: array
      ignored:
        items:
          type: string
        type: array
      nodes:
        items:
          $ref: '#/definitions/Node'
        type: array
      pagination:
        $ref: '#/definitions/Pagination'
    required:
      - facettes
      - nodes
      - pagination
    type: object
  SearchVCard:
    properties:
      vcard:
        type: string
    type: object
  Serializable:
    type: object
  ServerUpdateInfo:
    properties:
      description:
        type: string
      executedAt:
        format: int64
        type: integer
      id:
        type: string
    type: object
  Service:
    properties:
      instances:
        items:
          $ref: '#/definitions/ServiceInstance'
        type: array
      name:
        type: string
    required:
      - instances
      - name
    type: object
  ServiceInstance:
    properties:
      endpoint:
        type: string
      version:
        $ref: '#/definitions/ServiceVersion'
    required:
      - endpoint
      - version
    type: object
  ServiceVersion:
    properties:
      major:
        format: int32
        type: integer
      minor:
        format: int32
        type: integer
      renderservice:
        type: string
      repository:
        type: string
    required:
      - major
      - minor
    type: object
  Services:
    properties:
      visualization:
        type: string
    type: object
  SessionExpiredDialog:
    type: object
  SharedFolderOptions:
    properties:
      ccFiles:
        enum:
          - none
          - assign
          - delete
        type: string
      folders:
        enum:
          - none
          - assign
        type: string
      move:
        default: false
        type: boolean
      privateFiles:
        enum:
          - none
          - assign
          - delete
        type: string
    type: object
  SharingInfo:
    properties:
      expired:
        default: false
        type: boolean
      invitedBy:
        $ref: '#/definitions/Person'
      node:
        $ref: '#/definitions/Node'
      password:
        default: false
        type: boolean
      passwordMatches:
        default: false
        type: boolean
    type: object
  SimpleEdit:
    properties:
      globalGroups:
        items:
          $ref: '#/definitions/SimpleEditGlobalGroups'
        type: array
      organization:
        $ref: '#/definitions/SimpleEditOrganization'
      organizationFilter:
        type: string
    type: object
  SimpleEditGlobalGroups:
    properties:
      groups:
        items:
          type: string
        type: array
      toolpermission:
        type: string
    type: object
  SimpleEditOrganization:
    properties:
      groupTypes:
        items:
          type: string
        type: array
    type: object
  SortColumnV2:
    properties:
      id:
        type: string
      mode:
        type: string
    type: object
  SortV2:
    properties:
      columns:
        items:
          $ref: '#/definitions/SortColumnV2'
        type: array
      default:
        $ref: '#/definitions/SortV2Default'
      id:
        type: string
    type: object
  SortV2Default:
    properties:
      sortAscending:
        default: false
        type: boolean
      sortBy:
        type: string
    type: object
  StatisticEntity:
    properties:
      count:
        format: int32
        type: integer
      value:
        type: string
    required:
      - count
      - value
    type: object
  StatisticEntry:
    properties:
      entities:
        items:
          $ref: '#/definitions/StatisticEntity'
        type: array
      property:
        type: string
    required:
      - entities
      - property
    type: object
  Statistics:
    properties:
      entries:
        items:
          $ref: '#/definitions/StatisticEntry'
        type: array
    required:
      - entries
    type: object
  StatisticsGlobal:
    properties:
      groups:
        items:
          $ref: '#/definitions/StatisticsKeyGroup'
        type: array
      overall:
        $ref: '#/definitions/StatisticsGroup'
      user:
        $ref: '#/definitions/StatisticsUser'
    type: object
  StatisticsGroup:
    properties:
      count:
        format: int32
        type: integer
      subGroups:
        items:
          $ref: '#/definitions/StatisticsSubGroup'
        type: array
    type: object
  StatisticsKeyGroup:
    properties:
      count:
        format: int32
        type: integer
      displayName:
        type: string
      key:
        type: string
      subGroups:
        items:
          $ref: '#/definitions/StatisticsSubGroup'
        type: array
    type: object
  StatisticsSubGroup:
    properties:
      count:
        items:
          $ref: '#/definitions/SubGroupItem'
        type: array
      id:
        type: string
    type: object
  StatisticsUser:
    properties:
      count:
        format: int32
        type: integer
    type: object
  StoredService:
    properties:
      about:
        items:
          type: string
        type: array
      audience:
        items:
          $ref: '#/definitions/Audience'
        type: array
      description:
        type: string
      icon:
        type: string
      id:
        type: string
      inLanguage:
        type: string
      interfaces:
        items:
          $ref: '#/definitions/Interface'
        type: array
      isAccessibleForFree:
        default: false
        type: boolean
      logo:
        type: string
      name:
        type: string
      provider:
        $ref: '#/definitions/Provider'
      startDate:
        type: string
      type:
        type: string
      url:
        type: string
    type: object
  Stream:
    properties:
      enabled:
        default: false
        type: boolean
    type: object
  StreamEntry:
    properties:
      author:
        $ref: '#/definitions/UserSimple'
      created:
        format: int64
        type: integer
      description:
        type: string
      id:
        type: string
      modified:
        format: int64
        type: integer
      nodes:
        items:
          $ref: '#/definitions/Node'
        type: array
      priority:
        format: int32
        type: integer
      properties:
        additionalProperties:
          type: object
        type: object
    type: object
  StreamEntryInput:
    properties:
      description:
        type: string
      id:
        type: string
      nodes:
        items:
          type: string
        type: array
      priority:
        format: int32
        type: integer
      properties:
        additionalProperties:
          type: object
        type: object
      title:
        type: string
    type: object
  StreamList:
    properties:
      pagination:
        $ref: '#/definitions/Pagination'
      stream:
        items:
          $ref: '#/definitions/StreamEntry'
        type: array
    type: object
  SubGroupItem:
    properties:
      count:
        format: int32
        type: integer
      displayName:
        type: string
      key:
        type: string
    type: object
  Subwidget:
    properties:
      id:
        type: string
    type: object
  SuggestionParam:
    properties:
      criterias:
        items:
          $ref: '#/definitions/MdsQueryCriteria'
        type: array
      valueParameters:
        $ref: '#/definitions/ValueParameters'
    type: object
  Tracking:
    properties:
      authority:
        $ref: '#/definitions/TrackingAuthority'
      counts:
        additionalProperties:
          format: int32
          type: integer
        type: object
      date:
        type: string
      fields:
        additionalProperties:
          $ref: '#/definitions/Serializable'
        type: object
      groups:
        additionalProperties:
          additionalProperties:
            additionalProperties:
              format: int64
              type: integer
            type: object
          type: object
        type: object
    type: object
  TrackingAuthority:
    properties:
      hash:
        type: string
      mediacenter:
        items:
          $ref: '#/definitions/Group'
        type: array
      organization:
        items:
          $ref: '#/definitions/Organization'
        type: array
    type: object
  TrackingNode:
    properties:
      authority:
        $ref: '#/definitions/TrackingAuthority'
      counts:
        additionalProperties:
          format: int32
          type: integer
        type: object
      date:
        type: string
      fields:
        additionalProperties:
          $ref: '#/definitions/Serializable'
        type: object
      groups:
        additionalProperties:
          additionalProperties:
            additionalProperties:
              format: int64
              type: integer
            type: object
          type: object
        type: object
      node:
        $ref: '#/definitions/Node'
    type: object
  UploadResult:
    properties:
      file:
        type: string
    type: object
  Usage:
    properties:
      appId:
        type: string
      appSubtype:
        type: string
      appType:
        type: string
      appUser:
        type: string
      appUserMail:
        type: string
      courseId:
        type: string
      created:
        format: date-time
        type: string
      distinctPersons:
        format: int32
        type: integer
      fromUsed:
        format: date-time
        type: string
      guid:
        type: string
      modified:
        format: date-time
        type: string
      nodeId:
        type: string
      parentNodeId:
        type: string
      resourceId:
        type: string
      toUsed:
        format: date-time
        type: string
      type:
        type: string
      usageCounter:
        format: int32
        type: integer
      usageVersion:
        type: string
      usageXmlParams:
        $ref: '#/definitions/Parameters'
      usageXmlParamsRaw:
        type: string
    required:
      - appId
      - appUser
      - appUserMail
      - courseId
      - nodeId
      - parentNodeId
      - resourceId
      - usageVersion
    type: object
  Usages:
    properties:
      usages:
        items:
          $ref: '#/definitions/Usage'
        type: array
    type: object
  User:
    properties:
      authorityName:
        type: string
      authorityType:
        enum:
          - USER
          - GROUP
          - OWNER
          - EVERYONE
          - GUEST
        type: string
      homeFolder:
        $ref: '#/definitions/NodeRef'
      organizations:
        items:
          $ref: '#/definitions/Organization'
        type: array
      profile:
        $ref: '#/definitions/UserProfile'
      properties:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      quota:
        $ref: '#/definitions/UserQuota'
      sharedFolders:
        items:
          $ref: '#/definitions/NodeRef'
        type: array
      status:
        $ref: '#/definitions/UserStatus'
      userName:
        type: string
    required:
      - authorityName
      - homeFolder
    type: object
  UserCredential:
    properties:
      newPassword:
        type: string
      oldPassword:
        type: string
    required:
      - newPassword
    type: object
  UserEntries:
    properties:
      pagination:
        $ref: '#/definitions/Pagination'
      users:
        items:
          $ref: '#/definitions/UserSimple'
        type: array
    required:
      - pagination
      - users
    type: object
  UserEntry:
    properties:
      editProfile:
        default: false
        type: boolean
      person:
        $ref: '#/definitions/User'
    required:
      - person
    type: object
  UserProfile:
    properties:
      about:
        type: string
      avatar:
        type: string
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      primaryAffiliation:
        type: string
      skills:
        items:
          type: string
        type: array
      types:
        items:
          type: string
        readOnly: true
        type: array
      vcard:
        type: string
    type: object
  UserProfileAppAuth:
    properties:
      about:
        type: string
      avatar:
        type: string
      email:
        type: string
      extendedAttributes:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      firstName:
        type: string
      lastName:
        type: string
      primaryAffiliation:
        type: string
      skills:
        items:
          type: string
        type: array
      types:
        items:
          type: string
        readOnly: true
        type: array
      vcard:
        type: string
    type: object
  UserProfileEdit:
    properties:
      about:
        type: string
      avatar:
        type: string
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      primaryAffiliation:
        type: string
      sizeQuota:
        format: int64
        type: integer
      skills:
        items:
          type: string
        type: array
      types:
        items:
          type: string
        readOnly: true
        type: array
      vcard:
        type: string
    type: object
  UserQuota:
    properties:
      enabled:
        default: false
        type: boolean
      sizeCurrent:
        format: int64
        type: integer
      sizeQuota:
        format: int64
        type: integer
    type: object
  UserSimple:
    properties:
      authorityName:
        type: string
      authorityType:
        enum:
          - USER
          - GROUP
          - OWNER
          - EVERYONE
          - GUEST
        type: string
      organizations:
        items:
          $ref: '#/definitions/Organization'
        type: array
      profile:
        $ref: '#/definitions/UserProfile'
      properties:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      status:
        $ref: '#/definitions/UserStatus'
      userName:
        type: string
    required:
      - authorityName
    type: object
  UserStats:
    properties:
      collectionCount:
        format: int32
        type: integer
      nodeCount:
        format: int32
        type: integer
      nodeCountCC:
        format: int32
        type: integer
    type: object
  UserStatus:
    properties:
      date:
        format: int64
        type: integer
      status:
        enum:
          - active
          - blocked
          - todelete
        type: string
    type: object
  Value:
    properties:
      count:
        format: int32
        type: integer
      value:
        type: string
    required:
      - count
      - value
    type: object
  ValueParameters:
    properties:
      pattern:
        description: prefix of the value (or "-all-" for all values)
        type: string
      property:
        type: string
      query:
        type: string
    required:
      - pattern
      - property
      - query
    type: object
  ValueV2:
    properties:
      caption:
        type: string
      description:
        type: string
      id:
        type: string
      parent:
        type: string
    type: object
  Values:
    properties:
      admin:
        $ref: '#/definitions/Admin'
      allowedLicenses:
        items:
          type: string
        type: array
      availableMds:
        items:
          $ref: '#/definitions/AvailableMds'
        type: array
      availableRepositories:
        items:
          type: string
        type: array
      banner:
        $ref: '#/definitions/Banner'
      branding:
        default: false
        type: boolean
      collections:
        $ref: '#/definitions/Collections'
      customCSS:
        type: string
      customLicenses:
        items:
          $ref: '#/definitions/License'
        type: array
      customOptions:
        items:
          $ref: '#/definitions/ContextMenuEntry'
        type: array
      defaultPassword:
        type: string
      defaultUsername:
        type: string
      editProfile:
        default: false
        type: boolean
      editProfileUrl:
        type: string
      extension:
        type: string
      frontpage:
        $ref: '#/definitions/ConfigFrontpage'
      guest:
        $ref: '#/definitions/Guest'
      helpMenuOptions:
        items:
          $ref: '#/definitions/HelpMenuOptions'
        type: array
      helpUrl:
        type: string
      hideMainMenu:
        items:
          type: string
        type: array
      icons:
        items:
          $ref: '#/definitions/FontIcon'
        type: array
      images:
        items:
          $ref: '#/definitions/Image'
        type: array
      imprintUrl:
        type: string
      itemsPerRequest:
        format: int32
        type: integer
      licenseAgreement:
        $ref: '#/definitions/LicenseAgreement'
      licenseDialogOnUpload:
        default: false
        type: boolean
      loginAllowLocal:
        default: false
        type: boolean
      loginDefaultLocation:
        type: string
      loginProviderTargetUrl:
        type: string
      loginProvidersUrl:
        type: string
      loginUrl:
        type: string
      logout:
        $ref: '#/definitions/LogoutInfo'
      mainnav:
        $ref: '#/definitions/Mainnav'
      menuEntries:
        items:
          $ref: '#/definitions/MenuEntry'
        type: array
      nodeReport:
        default: false
        type: boolean
      privacy:
        $ref: '#/definitions/ConfigPrivacy'
      privacyInformationUrl:
        type: string
      publishingNotice:
        default: false
        type: boolean
      recoverPasswordUrl:
        type: string
      register:
        $ref: '#/definitions/Register'
      remote:
        $ref: '#/definitions/ConfigRemote'
      rendering:
        $ref: '#/definitions/Rendering'
      searchGroupResults:
        default: false
        type: boolean
      searchSidenavMode:
        type: string
      searchViewType:
        format: int32
        type: integer
      services:
        $ref: '#/definitions/Services'
      sessionExpiredDialog:
        $ref: '#/definitions/SessionExpiredDialog'
      simpleEdit:
        $ref: '#/definitions/SimpleEdit'
      siteTitle:
        type: string
      stream:
        $ref: '#/definitions/Stream'
      supportedLanguages:
        items:
          type: string
        type: array
      upload:
        $ref: '#/definitions/ConfigUpload'
      userAffiliation:
        default: false
        type: boolean
      userDisplayName:
        type: string
      userSecondaryDisplayName:
        type: string
      whatsNewUrl:
        type: string
      workflow:
        $ref: '#/definitions/ConfigWorkflow'
      workspaceColumns:
        items:
          type: string
        type: array
      workspaceViewType:
        format: int32
        type: integer
    type: object
  Variables:
    properties:
      current:
        additionalProperties:
          type: string
        type: object
      global:
        additionalProperties:
          type: string
        type: object
    type: object
  ViewV2:
    properties:
      caption:
        type: string
      hideIfEmpty:
        default: false
        type: boolean
      html:
        type: string
      icon:
        type: string
      id:
        type: string
      isExtended:
        default: false
        type: boolean
      rel:
        type: string
    type: object
  WebsiteInformation:
    properties:
      description:
        type: string
      keywords:
        items:
          type: string
        type: array
      license:
        type: string
      page:
        type: string
      title:
        type: string
    type: object
  WidgetCondition:
    properties:
      dynamic:
        default: false
        type: boolean
      negate:
        default: false
        type: boolean
      pattern:
        type: string
      type:
        type: string
      value:
        type: string
    type: object
  WidgetV2:
    properties:
      allowempty:
        default: false
        type: boolean
      bottomCaption:
        type: string
      caption:
        type: string
      condition:
        $ref: '#/definitions/WidgetCondition'
      defaultMax:
        format: int32
        type: integer
      defaultMin:
        format: int32
        type: integer
      defaultvalue:
        type: string
      hasValues:
        default: false
        type: boolean
      icon:
        type: string
      id:
        type: string
      isExtended:
        default: false
        type: boolean
      isRequired:
        enum:
          - mandatory
          - mandatoryForPublish
          - optional
          - ignore
        readOnly: true
        type: string
      isSearchable:
        default: false
        type: boolean
      link:
        type: string
      max:
        format: int32
        type: integer
      maxlength:
        format: int32
        type: integer
      min:
        format: int32
        type: integer
      placeholder:
        type: string
      step:
        format: int32
        type: integer
      subwidgets:
        items:
          $ref: '#/definitions/Subwidget'
        type: array
      template:
        type: string
      type:
        type: string
      unit:
        type: string
      values:
        items:
          $ref: '#/definitions/ValueV2'
        type: array
    type: object
  WorkflowHistory:
    properties:
      comment:
        type: string
      editor:
        $ref: '#/definitions/UserSimple'
      receiver:
        items:
          $ref: '#/definitions/Authority'
        type: array
      status:
        type: string
      time:
        format: int64
        type: integer
    type: object
info:
  description: The public restful API of the edu-sharing repository.
  title: edu-sharing Repository REST API
  version: '1.1'
paths:
  /_about:
    get:
      description: Get all services provided by this API.
      operationId: about
      parameters: []
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/About'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Discover the API.
      tags:
        - ABOUT
  /_about/status/{mode}:
    get:
      description: returns http status 200 when ok
      operationId: status
      parameters:
        - enum:
            - SEARCH
            - SERVICE
          in: path
          name: mode
          required: true
          type: string
        - default: '10'
          format: int32
          in: query
          name: timeoutSeconds
          required: false
          type: integer
      responses:
        '200':
          description: OK.
          schema:
            type: string
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: status of repo services
      tags:
        - ABOUT
  /admin/v1/applications:
    get:
      description: List all registered applications.
      operationId: getApplications
      parameters: []
      responses:
        '200':
          description: OK.
          schema:
            items:
              $ref: '#/definitions/Application'
            type: array
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: list applications
      tags:
        - ADMIN v1
    put:
      description: register the specified application.
      operationId: addApplication
      parameters:
        - description: Remote application metadata url
          in: query
          name: url
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            additionalProperties:
              type: object
            type: object
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: register/add an application
      tags:
        - ADMIN v1
  /admin/v1/applications/xml:
    put:
      description: register the xml file provided.
      operationId: addApplication
      parameters:
        - description: XML file for app to register
          in: formData
          name: xml
          required: true
          type: file
      responses:
        '200':
          description: OK.
          schema:
            additionalProperties:
              type: object
            type: object
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: register/add an application via xml file
      tags:
        - ADMIN v1
  /admin/v1/applications/{id}:
    delete:
      description: remove the specified application.
      operationId: removeApplication
      parameters:
        - description: Application id
          in: path
          name: id
          required: true
          type: string
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: remove an application
      tags:
        - ADMIN v1
  /admin/v1/applications/{xml}:
    get:
      description: list any xml properties (like from homeApplication.properties.xml)
      operationId: getApplicationXML
      parameters:
        - description: Properties Filename (*.xml)
          in: path
          name: xml
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            additionalProperties:
              type: object
            type: object
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: list any xml properties (like from homeApplication.properties.xml)
      tags:
        - ADMIN v1
    put:
      description: if the key exists, it will be overwritten. Otherwise, it will be
        created. You only need to transfer keys you want to edit
      operationId: updateApplicationXML
      parameters:
        - description: Properties Filename (*.xml)
          in: path
          name: xml
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            additionalProperties:
              type: string
            type: object
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: edit any properties xml (like homeApplication.properties.xml)
      tags:
        - ADMIN v1
  /admin/v1/applyTemplate:
    post:
      description: apply a folder template.
      operationId: applyTemplate
      parameters:
        - description: Template Filename
          in: query
          name: template
          required: true
          type: string
        - description: Group name (authority name)
          in: query
          name: group
          required: true
          type: string
        - description: Folder name
          in: query
          name: folder
          required: false
          type: string
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: apply a folder template
      tags:
        - ADMIN v1
  /admin/v1/cache/cacheEntries/{id}:
    get:
      description: Get entries of a cache.
      operationId: getCacheEntries
      parameters:
        - description: Id/bean name of the cache
          in: path
          name: id
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            additionalProperties:
              type: object
            type: object
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get entries of a cache
      tags:
        - ADMIN v1
  /admin/v1/cache/cacheInfo/{id}:
    get:
      description: Get information about a cache.
      operationId: getCacheInfo
      parameters:
        - description: Id/bean name of the cache
          in: path
          name: id
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/CacheInfo'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get information about a cache
      tags:
        - ADMIN v1
  /admin/v1/cache/clearCache:
    post:
      description: clear cache
      operationId: clearCache
      parameters:
        - description: bean
          in: query
          name: bean
          required: false
          type: string
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: clear cache
      tags:
        - ADMIN v1
  /admin/v1/cache/refreshEduGroupCache:
    post:
      description: Refresh the Edu Group Cache.
      operationId: refreshEduGroupCache
      parameters:
        - default: 'false'
          description: keep existing
          in: query
          name: keepExisting
          required: false
          type: boolean
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Refresh the Edu Group Cache
      tags:
        - ADMIN v1
  /admin/v1/cache/removeCacheEntry:
    post:
      description: remove cache entry
      operationId: removeCacheEntry
      parameters:
        - description: cacheIndex
          format: int32
          in: query
          name: cacheIndex
          required: false
          type: integer
        - description: bean
          in: query
          name: bean
          required: false
          type: string
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: remove cache entry
      tags:
        - ADMIN v1
  /admin/v1/catalina:
    get:
      description: Get catalina.out log.
      operationId: getCatalinaOut
      parameters: []
      responses:
        '200':
          description: OK.
          schema:
            items:
              type: string
            type: array
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get last info from catalina out
      tags:
        - ADMIN v1
  /admin/v1/clusterInfo:
    get:
      description: Get information the Cluster
      operationId: getCluster
      parameters: []
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/CacheCluster'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get information about the Cluster
      tags:
        - ADMIN v1
  /admin/v1/clusterInfos:
    get:
      description: Get information the Cluster
      operationId: getClusters
      parameters: []
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/CacheCluster'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get information about the Cluster
      tags:
        - ADMIN v1
  /admin/v1/configFile:
    get:
      description: ''
      operationId: getConfigFile
      parameters:
        - description: filename to fetch
          in: query
          name: filename
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            type: string
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: get a base system config file (e.g. edu-sharing.conf)
      tags:
        - ADMIN v1
    put:
      description: ''
      operationId: updateConfigFile
      parameters:
        - description: filename to fetch
          in: query
          name: filename
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: update a base system config file (e.g. edu-sharing.conf)
      tags:
        - ADMIN v1
  /admin/v1/deletePersons:
    put:
      description: delete the given persons. Their status must be set to "todelete"
      operationId: deletePerson
      parameters:
        - collectionFormat: multi
          description: names of the users to delete
          in: query
          items:
            type: string
          name: username
          required: true
          type: array
        - description: options object what and how to delete user contents
          in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/PersonDeleteOptions'
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/PersonReport'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: delete persons
      tags:
        - ADMIN v1
  /admin/v1/elastic:
    get:
      consumes:
        - application/json
      description: ''
      operationId: searchByElasticDSL
      parameters:
        - description: dsl query (json encoded)
          in: query
          name: dsl
          required: false
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/SearchResultElastic'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Search for custom elastic DSL query
      tags:
        - ADMIN v1
  /admin/v1/export/lom:
    get:
      description: Export Nodes with LOM Metadata Format.
      operationId: exportLOM
      parameters:
        - description: filterQuery
          in: query
          name: filterQuery
          required: true
          type: string
        - description: targetDir
          in: query
          name: targetDir
          required: true
          type: string
        - description: subObjectHandler
          in: query
          name: subObjectHandler
          required: true
          type: boolean
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Export Nodes with LOM Metadata Format
      tags:
        - ADMIN v1
  /admin/v1/globalGroups:
    get:
      description: Get global groups (groups across repositories).
      operationId: getGlobalGroups
      parameters: []
      responses:
        '200':
          description: OK.
          schema:
            items:
              $ref: '#/definitions/Group'
            type: array
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get global groups
      tags:
        - ADMIN v1
  /admin/v1/import/collections:
    post:
      description: xml file must be structured as defined by the xsd standard
      operationId: importCollections
      parameters:
        - description: Id of the root to initialize the collection structure, or '-root-'
            to inflate them on the first level
          in: query
          name: parent
          required: false
          type: string
        - description: XML file to parse (or zip file containing exactly 1 xml file
            to parse)
          in: formData
          name: xml
          required: true
          type: file
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/CollectionsResult'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: import collections via a xml file
      tags:
        - ADMIN v1
  /admin/v1/import/excel:
    post:
      description: Import excel data.
      operationId: importExcel
      parameters:
        - description: parent
          in: query
          name: parent
          required: true
          type: string
        - default: 'false'
          description: addToCollection
          in: query
          name: addToCollection
          required: true
          type: boolean
        - description: Excel file to import
          in: formData
          name: excel
          required: true
          type: file
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/ExcelResult'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Import excel data
      tags:
        - ADMIN v1
  /admin/v1/import/oai:
    delete:
      description: Remove deleted imports.
      operationId: removeOaiImports
      parameters:
        - description: base url
          in: query
          name: baseUrl
          required: true
          type: string
        - description: set/catalog id
          in: query
          name: set
          required: true
          type: string
        - description: metadata prefix
          in: query
          name: metadataPrefix
          required: true
          type: string
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Remove deleted imports
      tags:
        - ADMIN v1
    post:
      description: Import oai data.
      operationId: importOai
      parameters:
        - description: base url
          in: query
          name: baseUrl
          required: true
          type: string
        - description: set/catalog id
          in: query
          name: set
          required: true
          type: string
        - description: metadata prefix
          in: query
          name: metadataPrefix
          required: true
          type: string
        - description: id metadataset
          in: query
          name: metadataset
          required: false
          type: string
        - default: org.edu_sharing.repository.server.jobs.quartz.ImporterJob
          description: importer job class name (call /classes to obtain a list)
          in: query
          name: className
          required: true
          type: string
        - default: org.edu_sharing.repository.server.importer.OAIPMHLOMImporter
          description: importer class name (call /classes to obtain a list)
          in: query
          name: importerClassName
          required: false
          type: string
        - default: org.edu_sharing.repository.server.importer.RecordHandlerLOM
          description: RecordHandler class name
          in: query
          name: recordHandlerClassName
          required: false
          type: string
        - description: BinaryHandler class name (may be empty for none)
          in: query
          name: binaryHandlerClassName
          required: false
          type: string
        - description: PersistentHandlerClassName class name (may be empty for none)
          in: query
          name: persistentHandlerClassName
          required: false
          type: string
        - description: url to file
          in: query
          name: fileUrl
          required: false
          type: string
        - description: OAI Ids to import, can be null than the whole set will be imported
          in: query
          name: oaiIds
          required: false
          type: string
        - default: 'false'
          description: force Update of all entries
          in: query
          name: forceUpdate
          required: false
          type: boolean
        - description: 'from: datestring yyyy-MM-dd)'
          in: query
          name: from
          required: false
          type: string
        - description: 'until: datestring yyyy-MM-dd)'
          in: query
          name: until
          required: false
          type: string
        - description: 'periodInDays: internal sets from and until. only effective
            if from/until not set)'
          in: query
          name: periodInDays
          required: false
          type: string
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Import oai data
      tags:
        - ADMIN v1
  /admin/v1/import/oai/classes:
    get:
      description: Get available importer classes for OAI import.
      operationId: getOaiClasses
      parameters: []
      responses:
        '200':
          description: OK.
          schema:
            items:
              type: string
            type: array
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get OAI class names
      tags:
        - ADMIN v1
  /admin/v1/import/oai/xml:
    post:
      description: ''
      operationId: importOaiXML
      parameters:
        - default: org.edu_sharing.repository.server.importer.RecordHandlerLOM
          description: RecordHandler class name
          in: query
          name: recordHandlerClassName
          required: false
          type: string
        - description: BinaryHandler class name (may be empty for none)
          in: query
          name: binaryHandlerClassName
          required: false
          type: string
        - in: formData
          name: xml
          required: false
          type: file
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/Node'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Import single xml via oai (for testing)
      tags:
        - ADMIN v1
  /admin/v1/import/refreshCache/{folder}:
    post:
      description: Refresh importer cache.
      operationId: refreshCache
      parameters:
        - default: -userhome-
          description: refresh cache root folder id
          in: path
          name: folder
          required: true
          type: string
        - default: 'false'
          description: sticky
          in: query
          name: sticky
          required: true
          type: boolean
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Refresh cache
      tags:
        - ADMIN v1
  /admin/v1/job/{jobClass}:
    post:
      description: Start a Job.
      operationId: startJob
      parameters:
        - description: jobClass
          in: path
          name: jobClass
          required: true
          type: string
        - description: params
          in: body
          name: body
          required: true
          schema:
            additionalProperties:
              type: string
            type: object
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: Duplicate Entity/Node conflict (Node with same name exists)
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Start a Job.
      tags:
        - ADMIN v1
  /admin/v1/jobs:
    get:
      description: ''
      operationId: getJobs
      parameters: []
      responses:
        '200':
          description: OK.
          schema:
            items:
              $ref: '#/definitions/JobInfo'
            type: array
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: get all running jobs
      tags:
        - ADMIN v1
  /admin/v1/jobs/all:
    get:
      description: ''
      operationId: getAllJobs
      parameters: []
      responses:
        '200':
          description: OK.
          schema:
            items:
              $ref: '#/definitions/JobDescription'
            type: array
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: get all available jobs
      tags:
        - ADMIN v1
  /admin/v1/jobs/{job}:
    delete:
      description: ''
      operationId: cancelJob
      parameters:
        - in: path
          name: job
          required: true
          type: string
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: cancel a running job
      tags:
        - ADMIN v1
  /admin/v1/log:
    post:
      description: Root appenders are used. Check the appender treshold.
      operationId: changeLogging
      parameters:
        - description: name
          in: query
          name: name
          required: true
          type: string
        - description: loglevel
          in: query
          name: loglevel
          required: true
          type: string
        - default: File
          description: appender
          in: query
          name: appender
          required: false
          type: string
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: Duplicate Entity/Node conflict (Node with same name exists)
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Change the loglevel for classes at runtime.
      tags:
        - ADMIN v1
  /admin/v1/lucene:
    get:
      consumes:
        - application/json
      description: e.g. @cm\:name:"*"
      operationId: searchByLucene
      parameters:
        - default: '@cm\:name:"*"'
          description: query
          in: query
          name: query
          required: false
          type: string
        - default: '10'
          description: maximum items per page
          format: int32
          in: query
          name: maxItems
          required: false
          type: integer
        - default: '0'
          description: skip a number of items
          format: int32
          in: query
          name: skipCount
          required: false
          type: integer
        - collectionFormat: multi
          description: sort properties
          in: query
          items:
            type: string
          name: sortProperties
          required: false
          type: array
        - collectionFormat: multi
          description: sort ascending, true if not set. Use multiple values to change
            the direction according to the given property at the same index
          in: query
          items:
            type: boolean
          name: sortAscending
          required: false
          type: array
        - collectionFormat: multi
          description: property filter for result nodes (or "-all-" for all properties)
          in: query
          items:
            default: -all-
            type: string
          name: propertyFilter
          required: false
          type: array
        - description: store, workspace or archive
          enum:
            - Workspace
            - Archive
          in: query
          name: store
          required: false
          type: string
        - collectionFormat: multi
          description: authority scope to search for
          in: query
          items:
            type: string
          name: authorityScope
          required: false
          type: array
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/SearchResult'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Search for custom lucene query
      tags:
        - ADMIN v1
  /admin/v1/lucene/export:
    get:
      consumes:
        - application/json
      description: e.g. @cm\:name:"*"
      operationId: exportByLucene
      parameters:
        - default: '@cm\:name:"*"'
          description: query
          in: query
          name: query
          required: false
          type: string
        - collectionFormat: multi
          description: sort properties
          in: query
          items:
            type: string
          name: sortProperties
          required: false
          type: array
        - collectionFormat: multi
          description: sort ascending, true if not set. Use multiple values to change
            the direction according to the given property at the same index
          in: query
          items:
            type: boolean
          name: sortAscending
          required: false
          type: array
        - collectionFormat: multi
          description: properties to fetch, use parent::<property> to include parent
            property values
          in: query
          items:
            type: string
          name: properties
          required: false
          type: array
        - description: store, workspace or archive
          enum:
            - Workspace
            - Archive
          in: query
          name: store
          required: false
          type: string
      responses:
        '200':
          description: OK.
          schema:
            items:
              type: object
            type: array
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Search for custom lucene query and choose specific properties to load
      tags:
        - ADMIN v1
  /admin/v1/mail/{receiver}/{template}:
    post:
      description: Sends the given template as a test to the given receiver.
      operationId: testMail
      parameters:
        - in: path
          name: receiver
          required: true
          type: string
        - in: path
          name: template
          required: true
          type: string
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: Duplicate Entity/Node conflict (Node with same name exists)
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Test a mail template
      tags:
        - ADMIN v1
  /admin/v1/propertyToMds:
    get:
      description: Get a Mds Valuespace for all values of the given properties.
      operationId: getPropertyToMds
      parameters:
        - collectionFormat: multi
          description: one or more properties
          in: query
          items:
            type: string
          name: properties
          required: true
          type: array
      responses:
        '200':
          description: OK.
          schema:
            type: string
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get a Mds Valuespace for all values of the given properties
      tags:
        - ADMIN v1
  /admin/v1/refreshAppInfo:
    post:
      description: Refresh the application info.
      operationId: refreshAppInfo
      parameters: []
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: refresh app info
      tags:
        - ADMIN v1
  /admin/v1/repositoryConfig:
    get:
      description: ''
      operationId: getConfig
      parameters: []
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/RepositoryConfig'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: get the repository config object
      tags:
        - ADMIN v1
    put:
      description: ''
      operationId: setConfig
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/RepositoryConfig'
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: set/update the repository config object
      tags:
        - ADMIN v1
  /admin/v1/serverUpdate/list:
    get:
      description: list available update tasks
      operationId: serverUpdateList
      parameters: []
      responses:
        '200':
          description: OK.
          schema:
            items:
              $ref: '#/definitions/ServerUpdateInfo'
            type: array
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: list available update tasks
      tags:
        - ADMIN v1
  /admin/v1/serverUpdate/run/{id}:
    post:
      description: Run a specific update task (test or full update).
      operationId: serverUpdateList
      parameters:
        - description: Id of the update task
          in: path
          name: id
          required: true
          type: string
        - default: 'false'
          description: Actually execute (if false, just runs in test mode)
          in: query
          name: execute
          required: true
          type: boolean
      responses:
        '200':
          description: OK.
          schema:
            items:
              $ref: '#/definitions/ServerUpdateInfo'
            type: array
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Run an update tasks
      tags:
        - ADMIN v1
  /admin/v1/statistics:
    get:
      description: get statistics.
      operationId: getStatistics
      parameters: []
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/AdminStatistics'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: get statistics
      tags:
        - ADMIN v1
  /admin/v1/toolpermissions/add/{name}:
    post:
      description: ''
      operationId: addToolpermission
      parameters:
        - description: Name/ID of toolpermission
          in: path
          name: name
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/Node'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: add a new toolpermissions
      tags:
        - ADMIN v1
  /admin/v1/toolpermissions/{authority}:
    get:
      description: Returns explicit (rights set for this authority) + effective (resulting
        rights for this authority) toolpermission
      operationId: getAllToolpermissions
      parameters:
        - description: Authority to load (user or group)
          in: path
          name: authority
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            additionalProperties:
              type: object
            type: object
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: get all toolpermissions for an authority
      tags:
        - ADMIN v1
    put:
      description: If a toolpermission has status UNDEFINED, it will remove explicit
        permissions for the authority
      operationId: setToolpermissions
      parameters:
        - description: Authority to set (user or group)
          in: path
          name: authority
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            additionalProperties:
              enum:
                - ALLOWED
                - DENIED
                - UNDEFINED
              type: string
            type: object
      responses:
        '200':
          description: OK.
          schema:
            additionalProperties:
              type: object
            type: object
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: set toolpermissions for an authority
      tags:
        - ADMIN v1
  /admin/v1/upload/temp/{name}:
    put:
      description: Upload a file to tomcat temp directory, to use it on the server
        (e.g. an update)
      operationId: uploadTemp
      parameters:
        - description: filename
          in: path
          name: name
          required: true
          type: string
        - description: file to upload
          in: formData
          name: file
          required: true
          type: file
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/UploadResult'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Upload a file
      tags:
        - ADMIN v1
  /archive/v1/purge/{repository}:
    delete:
      description: Searches for archive nodes.
      operationId: purge
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - collectionFormat: multi
          description: archived node
          in: query
          items:
            type: string
          name: archivedNodeIds
          required: true
          type: array
      responses:
        '200':
          description: OK.
          schema:
            type: string
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Searches for archive nodes.
      tags:
        - ARCHIVE v1
  /archive/v1/restore/{repository}:
    post:
      description: 'restores archived nodes. restoreStatus can have the following
        values: FALLBACK_PARENT_NOT_EXISTS, FALLBACK_PARENT_NO_PERMISSION, DUPLICATENAME,
        FINE'
      operationId: restore
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - collectionFormat: multi
          description: archived nodes
          in: query
          items:
            type: string
          name: archivedNodeIds
          required: true
          type: array
        - description: to target
          in: query
          name: target
          required: false
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/RestoreResults'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: restore archived nodes.
      tags:
        - ARCHIVE v1
  /archive/v1/search/{repository}/{pattern}:
    get:
      description: Searches for archive nodes.
      operationId: search
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: search pattern
          in: path
          name: pattern
          required: true
          type: string
        - default: '10'
          description: maximum items per page
          format: int32
          in: query
          name: maxItems
          required: false
          type: integer
        - default: '0'
          description: skip a number of items
          format: int32
          in: query
          name: skipCount
          required: false
          type: integer
        - collectionFormat: multi
          description: sort properties
          in: query
          items:
            type: string
          name: sortProperties
          required: false
          type: array
        - collectionFormat: multi
          description: sort ascending
          in: query
          items:
            type: boolean
          name: sortAscending
          required: false
          type: array
        - collectionFormat: multi
          description: property filter for result nodes (or "-all-" for all properties)
          in: query
          items:
            type: string
          name: propertyFilter
          required: false
          type: array
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/SearchResult'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Searches for archive nodes.
      tags:
        - ARCHIVE v1
  /archive/v1/search/{repository}/{pattern}/{person}:
    get:
      description: Searches for archive nodes.
      operationId: search
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: search pattern
          in: path
          name: pattern
          required: true
          type: string
        - default: -me-
          description: person
          in: path
          name: person
          required: true
          type: string
        - default: '10'
          description: maximum items per page
          format: int32
          in: query
          name: maxItems
          required: false
          type: integer
        - default: '0'
          description: skip a number of items
          format: int32
          in: query
          name: skipCount
          required: false
          type: integer
        - collectionFormat: multi
          description: sort properties
          in: query
          items:
            type: string
          name: sortProperties
          required: false
          type: array
        - collectionFormat: multi
          description: sort ascending
          in: query
          items:
            type: boolean
          name: sortAscending
          required: false
          type: array
        - collectionFormat: multi
          description: property filter for result nodes (or "-all-" for all properties)
          in: query
          items:
            type: string
          name: propertyFilter
          required: false
          type: array
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/SearchResult'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Searches for archive nodes.
      tags:
        - ARCHIVE v1
  /authentication/v1/appauth/{userId}:
    post:
      description: 'headers must be set: X-Edu-App-Id, X-Edu-App-Sig, X-Edu-App-Signed,
        X-Edu-App-Ts'
      operationId: authenticate
      parameters:
        - description: User Id
          in: path
          name: userId
          required: true
          type: string
        - description: User Profile
          in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/UserProfileAppAuth'
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/AuthenticationToken'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: authenticate user of an registered application.
      tags:
        - AUTHENTICATION v1
  /authentication/v1/destroySession:
    get:
      description: ''
      operationId: logout
      parameters: []
      responses:
        '200':
          description: OK.
        '500':
          description: Fatal error occured.
      summary: Destroys the current session and logout the user
      tags:
        - AUTHENTICATION v1
  /authentication/v1/hasAccessToScope:
    get:
      description: ''
      operationId: hasAccessToScope
      parameters:
        - description: scope
          in: query
          name: scope
          required: true
          type: string
      responses:
        '200':
          description: OK.
        '500':
          description: Fatal error occured.
      summary: Returns true if the current user has access to the given scope
      tags:
        - AUTHENTICATION v1
  /authentication/v1/loginToScope:
    post:
      description: Use the Basic auth header field to transfer the credentials
      operationId: loginToScope
      parameters:
        - description: 'credentials, example: test,test'
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/LoginCredentials'
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/Login'
      summary: Validates the Basic Auth Credentials and check if the session is a
        logged in user
      tags:
        - AUTHENTICATION v1
  /authentication/v1/validateSession:
    get:
      description: Use the Basic auth header field to transfer the credentials
      operationId: login
      parameters: []
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/Login'
      summary: Validates the Basic Auth Credentials and check if the session is a
        logged in user
      tags:
        - AUTHENTICATION v1
  /bulk/v1/find:
    post:
      description: Get a given node based on the posted, multiple criterias. Make
        sure that they'll provide an unique result
      operationId: find
      parameters:
        - description: properties that must match (with "AND" concatenated)
          in: body
          name: body
          required: true
          schema:
            additionalProperties:
              items:
                type: string
              type: array
            type: object
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeEntry'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: gets a given node
      tags:
        - BULK v1
  /bulk/v1/sync/{group}:
    put:
      description: Depending on the given "match" properties either a new node will
        be created or the existing one will be updated
      operationId: sync
      parameters:
        - description: The group to which this node belongs to. Used for internal
            structuring. Please use simple names only
          in: path
          name: group
          required: true
          type: string
        - collectionFormat: multi
          description: The properties that must match to identify if this node exists.
            Multiple properties will be and combined and compared
          in: query
          items:
            type: string
          name: match
          required: true
          type: array
        - collectionFormat: multi
          description: The properties on which the imported nodes should be grouped
            (for each value, a folder with the corresponding data is created)
          in: query
          items:
            type: string
          name: groupBy
          required: false
          type: array
        - description: type of node. If the node already exists, this will not change
            the type afterwards
          in: query
          name: type
          required: true
          type: string
        - collectionFormat: multi
          description: aspects of node
          in: query
          items:
            type: string
          name: aspects
          required: false
          type: array
        - description: properties, they'll not get filtered via mds, so be careful
            what you add here
          in: body
          name: body
          required: true
          schema:
            additionalProperties:
              items:
                type: string
              type: array
            type: object
        - description: reset all versions (like a complete reimport), all data inside
            edu-sharing will be lost
          in: query
          name: resetVersion
          required: false
          type: boolean
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeEntry'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create or update a given node
      tags:
        - BULK v1
  /clientUtils/v1/getWebsiteInformation:
    get:
      description: ''
      operationId: getWebsiteInformation
      parameters:
        - description: full url with http or https
          in: query
          name: url
          required: false
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/WebsiteInformation'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Read generic information about a webpage
      tags:
        - CLIENTUTILS v1
  /collection/v1/collections/{repository}/pinning:
    post:
      description: Remove all currently pinned collections and set them in the order
        send. Requires TOOLPERMISSION_COLLECTION_PINNING
      operationId: setPinnedCollections
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: List of collections that should be pinned
          in: body
          name: body
          required: true
          schema:
            items:
              type: string
            type: array
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Set pinned collections.
      tags:
        - COLLECTION v1
  /collection/v1/collections/{repository}/search:
    get:
      description: Search collections.
      operationId: search
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: query string
          in: query
          name: query
          required: true
          type: string
        - default: '500'
          description: maximum items per page
          format: int32
          in: query
          name: maxItems
          required: false
          type: integer
        - default: '0'
          description: skip a number of items
          format: int32
          in: query
          name: skipCount
          required: false
          type: integer
        - collectionFormat: multi
          description: sort properties
          in: query
          items:
            type: string
          name: sortProperties
          required: false
          type: array
        - collectionFormat: multi
          description: sort ascending, true if not set. Use multiple values to change
            the direction according to the given property at the same index
          in: query
          items:
            type: boolean
          name: sortAscending
          required: false
          type: array
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/CollectionEntries'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Search collections.
      tags:
        - COLLECTION v1
  /collection/v1/collections/{repository}/{collection}:
    delete:
      description: Delete a collection.
      operationId: deleteCollection
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of collection
          in: path
          name: collection
          required: true
          type: string
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete a collection.
      tags:
        - COLLECTION v1
    get:
      description: Get a collection.
      operationId: getCollection
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of collection
          in: path
          name: collection
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/CollectionEntry'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get a collection.
      tags:
        - COLLECTION v1
    put:
      description: Update a collection.
      operationId: updateCollection
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: collection
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Node'
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update a collection.
      tags:
        - COLLECTION v1
  /collection/v1/collections/{repository}/{collection}/children:
    post:
      description: Create a new collection.
      operationId: createCollection
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of parent collection (or "-root-" for level0 collections)
          in: path
          name: collection
          required: true
          type: string
        - description: collection
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Node'
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/CollectionEntry'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a new collection.
      tags:
        - COLLECTION v1
  /collection/v1/collections/{repository}/{collection}/children/collections:
    get:
      description: ''
      operationId: getCollectionsSubcollections
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of parent collection (or "-root-" for level0 collections)
          in: path
          name: collection
          required: true
          type: string
        - default: MY
          description: scope (only relevant if parent == -root-)
          enum:
            - EDU_ALL
            - EDU_GROUPS
            - TYPE_EDITORIAL
            - TYPE_MEDIA_CENTER
            - MY
            - RECENT
          in: query
          name: scope
          required: true
          type: string
        - default: 'true'
          description: fetch counts of collections (materials and subcollections).
            This parameter will decrease performance so only enable if if you need
            this data
          in: query
          name: fetchCounts
          required: false
          type: boolean
        - default: '500'
          description: maximum items per page
          format: int32
          in: query
          name: maxItems
          required: false
          type: integer
        - default: '0'
          description: skip a number of items
          format: int32
          in: query
          name: skipCount
          required: false
          type: integer
        - collectionFormat: multi
          description: sort properties
          in: query
          items:
            type: string
          name: sortProperties
          required: false
          type: array
        - collectionFormat: multi
          description: sort ascending, true if not set. Use multiple values to change
            the direction according to the given property at the same index
          in: query
          items:
            type: boolean
          name: sortAscending
          required: false
          type: array
        - collectionFormat: multi
          description: property filter for result nodes (or "-all-" for all properties)
          in: query
          items:
            type: string
          name: propertyFilter
          required: false
          type: array
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/ReferenceEntries'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get child collections for collection (or root).
      tags:
        - COLLECTION v1
  /collection/v1/collections/{repository}/{collection}/children/references:
    get:
      description: ''
      operationId: getCollectionsReferences
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of parent collection
          in: path
          name: collection
          required: true
          type: string
        - default: '500'
          description: maximum items per page
          format: int32
          in: query
          name: maxItems
          required: false
          type: integer
        - default: '0'
          description: skip a number of items
          format: int32
          in: query
          name: skipCount
          required: false
          type: integer
        - collectionFormat: multi
          description: sort properties
          in: query
          items:
            type: string
          name: sortProperties
          required: false
          type: array
        - collectionFormat: multi
          description: sort ascending, true if not set. Use multiple values to change
            the direction according to the given property at the same index
          in: query
          items:
            type: boolean
          name: sortAscending
          required: false
          type: array
        - collectionFormat: multi
          description: property filter for result nodes (or "-all-" for all properties)
          in: query
          items:
            type: string
          name: propertyFilter
          required: false
          type: array
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/ReferenceEntries'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get references objects for collection.
      tags:
        - COLLECTION v1
  /collection/v1/collections/{repository}/{collection}/feedback:
    get:
      description: Requires permission "???" on the specific permission
      operationId: getFeedbackOfCollection
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of collection
          in: path
          name: collection
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            items:
              $ref: '#/definitions/CollectionFeedback'
            type: array
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get feedback of collection.
      tags:
        - COLLECTION v1
    post:
      description: Requires permission "Feedback" on the specific collection
      operationId: addFeedbackToCollection
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of collection
          in: path
          name: collection
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            additionalProperties:
              items:
                type: string
              type: array
            type: object
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Post feedback to collection.
      tags:
        - COLLECTION v1
  /collection/v1/collections/{repository}/{collection}/icon:
    delete:
      description: Deletes Preview Image of a collection.
      operationId: removeIconOfCollection
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of collection
          in: path
          name: collection
          required: true
          type: string
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Deletes Preview Image of a collection.
      tags:
        - COLLECTION v1
    post:
      consumes:
        - multipart/form-data
      description: Writes Preview Image of a collection.
      operationId: changeIconOfCollection
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of collection
          in: path
          name: collection
          required: true
          type: string
        - description: MIME-Type
          in: query
          name: mimetype
          required: true
          type: string
        - in: formData
          name: file
          required: false
          type: file
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/CollectionEntry'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Writes Preview Image of a collection.
      tags:
        - COLLECTION v1
  /collection/v1/collections/{repository}/{collection}/order:
    post:
      description: Current order will be overriden. Requires full permissions for
        the parent collection
      operationId: setCollectionOrder
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of collection
          in: path
          name: collection
          required: true
          type: string
        - description: List of nodes in the order to be saved. If empty, custom order
            of the collection will be disabled
          in: body
          name: body
          required: false
          schema:
            items:
              type: string
            type: array
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Set order of nodes in a collection. In order to work as expected, provide
        a list of all nodes in this collection
      tags:
        - COLLECTION v1
  /collection/v1/collections/{repository}/{collection}/references/{node}:
    delete:
      description: Delete a node from a collection.
      operationId: deleteFromCollection
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of collection
          in: path
          name: collection
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete a node from a collection.
      tags:
        - COLLECTION v1
    put:
      description: Add a node to a collection.
      operationId: addToCollection
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of collection
          in: path
          name: collection
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
        - description: ID of source repository
          in: query
          name: sourceRepo
          required: false
          type: string
        - default: 'false'
          description: Allow that a node that already is inside the collection can
            be added again
          in: query
          name: allowDuplicate
          required: false
          type: boolean
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeEntry'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: Duplicate Entity/Node conflict (Node with same name exists)
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Add a node to a collection.
      tags:
        - COLLECTION v1
  /comment/v1/comments/{repository}/{comment}:
    delete:
      description: Delete the comment with the given id
      operationId: deleteComment
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: id of the comment to delete
          in: path
          name: comment
          required: true
          type: string
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: delete a comment
      tags:
        - COMMENT v1
    post:
      description: Edit the comment with the given id
      operationId: editComment
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: id of the comment to edit
          in: path
          name: comment
          required: true
          type: string
        - description: Text content of comment
          in: body
          name: body
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: edit a comment
      tags:
        - COMMENT v1
  /comment/v1/comments/{repository}/{node}:
    get:
      description: List all comments
      operationId: getComments
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/Comments'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: list comments
      tags:
        - COMMENT v1
    put:
      description: Adds a comment to the given node
      operationId: addComment
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
        - description: In reply to an other comment, can be null
          in: query
          name: commentReference
          required: false
          type: string
        - description: Text content of comment
          in: body
          name: body
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: create a new comment
      tags:
        - COMMENT v1
  /config/v1/dynamic/{key}:
    get:
      description: ''
      operationId: getDynamicValue
      parameters:
        - description: Key of the config value that should be fetched
          in: path
          name: key
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/DynamicConfig'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get a config entry (appropriate rights for the entry are required)
      tags:
        - CONFIG v1
    post:
      description: the body must be a json encapsulated string
      operationId: setDynamicValue
      parameters:
        - description: Key of the config value that should be fetched
          in: path
          name: key
          required: true
          type: string
        - description: Is everyone allowed to read the value
          in: query
          name: public
          required: true
          type: boolean
        - description: Must be a json-encapsulated string
          in: body
          name: body
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/DynamicConfig'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Set a config entry (admin rights required)
      tags:
        - CONFIG v1
  /config/v1/language:
    get:
      description: Language strings
      operationId: getLanguage
      parameters: []
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/Language'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: get override strings for the current language
      tags:
        - CONFIG v1
  /config/v1/language/defaults:
    get:
      description: ''
      operationId: getLanguageDefaults
      parameters: []
      responses:
        '200':
          description: OK.
          schema:
            additionalProperties:
              type: object
            type: object
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: get all inital language strings for angular
      tags:
        - CONFIG v1
  /config/v1/values:
    get:
      description: Current is the actual (context-based) active config. Global is
        the default global config if no context is active (may be identical to the
        current)
      operationId: getConfig
      parameters: []
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/Config'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: get repository config values
      tags:
        - CONFIG v1
  /config/v1/variables:
    get:
      description: global config variables
      operationId: getVariables
      parameters: []
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/Variables'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: get global config variables
      tags:
        - CONFIG v1
  /connector/v1/connectors/{repository}/list:
    get:
      description: ''
      operationId: listConnectors
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/ConnectorList'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: List all available connectors
      tags:
        - CONNECTOR v1
  /iam/v1/authorities/{repository}:
    get:
      description: Search authorities.
      operationId: searchAuthorities
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: pattern
          in: query
          name: pattern
          required: true
          type: string
        - default: 'true'
          description: global search context, defaults to true, otherwise just searches
            for users within the organizations
          in: query
          name: global
          required: false
          type: boolean
        - description: find a specific groupType (does nothing for persons)
          in: query
          name: groupType
          required: false
          type: string
        - description: find a specific signupMethod for groups (or asterisk for all
            including one) (does nothing for persons)
          in: query
          name: signupMethod
          required: false
          type: string
        - default: '10'
          description: maximum items per page
          format: int32
          in: query
          name: maxItems
          required: false
          type: integer
        - default: '0'
          description: skip a number of items
          format: int32
          in: query
          name: skipCount
          required: false
          type: integer
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/AuthorityEntries'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Search authorities.
      tags:
        - IAM v1
  /iam/v1/authorities/{repository}/recent:
    get:
      description: Get the authorities the current user has recently invited.
      operationId: getRecentlyInvited
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/AuthorityEntries'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get recently invited authorities.
      tags:
        - IAM v1
  /iam/v1/groups/{repository}:
    get:
      description: Search groups. (admin rights are required.)
      operationId: searchGroups
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: pattern
          in: query
          name: pattern
          required: true
          type: string
        - description: find a specific groupType
          in: query
          name: groupType
          required: false
          type: string
        - description: find a specific signupMethod for groups (or asterisk for all
            including one)
          in: query
          name: signupMethod
          required: false
          type: string
        - default: 'true'
          description: global search context, defaults to true, otherwise just searches
            for groups within the organizations
          in: query
          name: global
          required: false
          type: boolean
        - default: '10'
          description: maximum items per page
          format: int32
          in: query
          name: maxItems
          required: false
          type: integer
        - default: '0'
          description: skip a number of items
          format: int32
          in: query
          name: skipCount
          required: false
          type: integer
        - collectionFormat: multi
          description: sort properties
          in: query
          items:
            type: string
          name: sortProperties
          required: false
          type: array
        - collectionFormat: multi
          description: sort ascending, true if not set. Use multiple values to change
            the direction according to the given property at the same index
          in: query
          items:
            type: boolean
          name: sortAscending
          required: false
          type: array
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/GroupEntries'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Search groups.
      tags:
        - IAM v1
  /iam/v1/groups/{repository}/{group}:
    delete:
      description: Delete the group. (admin rights are required.)
      operationId: deleteGroup
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: groupname
          in: path
          name: group
          required: true
          type: string
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete the group.
      tags:
        - IAM v1
    get:
      description: Get the group. (To get foreign profiles, admin rights are required.)
      operationId: getGroup
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: groupname
          in: path
          name: group
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/GroupEntry'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get the group.
      tags:
        - IAM v1
    post:
      description: Create a new group. (admin rights are required.)
      operationId: createGroup
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: groupname
          in: path
          name: group
          required: true
          type: string
        - description: parent (will be added to this parent, also for name hashing),
            may be null
          in: query
          name: parent
          required: false
          type: string
        - description: properties
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/GroupProfile'
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/Group'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a new group.
      tags:
        - IAM v1
  /iam/v1/groups/{repository}/{group}/members:
    get:
      description: Get all members of the group. (admin rights are required.)
      operationId: getMembership
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: authority name (begins with GROUP_)
          in: path
          name: group
          required: true
          type: string
        - description: pattern
          in: query
          name: pattern
          required: false
          type: string
        - description: authorityType either GROUP or USER, empty to show all
          in: query
          name: authorityType
          required: false
          type: string
        - default: '10'
          description: maximum items per page
          format: int32
          in: query
          name: maxItems
          required: false
          type: integer
        - default: '0'
          description: skip a number of items
          format: int32
          in: query
          name: skipCount
          required: false
          type: integer
        - collectionFormat: multi
          description: sort properties
          in: query
          items:
            type: string
          name: sortProperties
          required: false
          type: array
        - collectionFormat: multi
          description: sort ascending, true if not set. Use multiple values to change
            the direction according to the given property at the same index
          in: query
          items:
            type: boolean
          name: sortAscending
          required: false
          type: array
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/AuthorityEntries'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get all members of the group.
      tags:
        - IAM v1
  /iam/v1/groups/{repository}/{group}/members/{member}:
    delete:
      description: Delete member from the group. (admin rights are required.)
      operationId: deleteMembership
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: groupname
          in: path
          name: group
          required: true
          type: string
        - description: authorityName of member
          in: path
          name: member
          required: true
          type: string
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete member from the group.
      tags:
        - IAM v1
    put:
      description: Add member to the group. (admin rights are required.)
      operationId: addMembership
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: groupname
          in: path
          name: group
          required: true
          type: string
        - description: authorityName of member
          in: path
          name: member
          required: true
          type: string
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: Duplicate Entity/Node conflict (Node with same name exists)
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Add member to the group.
      tags:
        - IAM v1
  /iam/v1/groups/{repository}/{group}/profile:
    put:
      description: Set profile of the group. (admin rights are required.)
      operationId: changeGroupProfile
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: groupname
          in: path
          name: group
          required: true
          type: string
        - description: properties
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/GroupProfile'
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Set profile of the group.
      tags:
        - IAM v1
  /iam/v1/groups/{repository}/{group}/signup:
    post:
      description: ''
      operationId: signupGroup
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of group
          in: path
          name: group
          required: true
          type: string
        - description: Password for signup (only required if signupMethod == password)
          in: query
          name: password
          required: false
          type: string
      responses:
        '200':
          description: OK.
          schema:
            enum:
              - InvalidPassword
              - AlreadyInList
              - AlreadyMember
              - Ok
            type: string
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: let the current user signup to the given group
      tags:
        - IAM v1
  /iam/v1/groups/{repository}/{group}/signup/config:
    post:
      description: ' requires admin rights'
      operationId: signupGroupDetails
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of group
          in: path
          name: group
          required: true
          type: string
        - description: Details to edit
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/GroupSignupDetails'
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: set group signup options
      tags:
        - IAM v1
  /iam/v1/groups/{repository}/{group}/signup/list:
    get:
      description: Requires admin rights or org administrator on this group
      operationId: signupGroupList
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of group
          in: path
          name: group
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            items:
              $ref: '#/definitions/User'
            type: array
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: list pending users that want to join this group
      tags:
        - IAM v1
  /iam/v1/groups/{repository}/{group}/signup/list/{user}:
    delete:
      description: Requires admin rights or org administrator on this group
      operationId: rejectSignup
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of group
          in: path
          name: group
          required: true
          type: string
        - description: ID of user
          in: path
          name: user
          required: true
          type: string
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: reject the pending user
      tags:
        - IAM v1
    put:
      description: Requires admin rights or org administrator on this group
      operationId: confirmSignup
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of group
          in: path
          name: group
          required: true
          type: string
        - description: ID of user
          in: path
          name: user
          required: true
          type: string
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: put the pending user into the group
      tags:
        - IAM v1
  /iam/v1/groups/{repository}/{group}/type/{type}:
    get:
      description: Get a subgroup by the specified type
      operationId: getSubgroupByType
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: authority name of the parent/primary group (begins with GROUP_)
          in: path
          name: group
          required: true
          type: string
        - description: authorityType either GROUP or USER, empty to show all
          in: path
          name: type
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/AuthorityEntries'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get a subgroup by the specified type
      tags:
        - IAM v1
  /iam/v1/people/{repository}:
    get:
      description: Search users. (admin rights are required.)
      operationId: searchUser
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: pattern
          in: query
          name: pattern
          required: true
          type: string
        - default: 'true'
          description: global search context, defaults to true, otherwise just searches
            for users within the organizations
          in: query
          name: global
          required: false
          type: boolean
        - description: the user status (e.g. active), if not set, all users are returned
          enum:
            - active
            - blocked
            - todelete
          in: query
          name: status
          required: false
          type: string
        - default: '10'
          description: maximum items per page
          format: int32
          in: query
          name: maxItems
          required: false
          type: integer
        - default: '0'
          description: skip a number of items
          format: int32
          in: query
          name: skipCount
          required: false
          type: integer
        - collectionFormat: multi
          description: sort properties
          in: query
          items:
            type: string
          name: sortProperties
          required: false
          type: array
        - collectionFormat: multi
          description: sort ascending, true if not set. Use multiple values to change
            the direction according to the given property at the same index
          in: query
          items:
            type: boolean
          name: sortAscending
          required: false
          type: array
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/UserEntries'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Search users.
      tags:
        - IAM v1
  /iam/v1/people/{repository}/{person}:
    delete:
      description: Delete the user. (admin rights are required.)
      operationId: deleteUser
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: username
          in: path
          name: person
          required: true
          type: string
        - default: 'false'
          description: force the deletion (if false then only persons which are previously
            marked for deletion are getting deleted)
          in: query
          name: force
          required: false
          type: boolean
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete the user.
      tags:
        - IAM v1
    get:
      description: Get the user. (Not all information are feteched for foreign profiles
        if current user is not an admin)
      operationId: getUser
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - default: -me-
          description: username (or "-me-" for current user)
          in: path
          name: person
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/UserEntry'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get the user.
      tags:
        - IAM v1
    post:
      description: Create a new user. (admin rights are required.)
      operationId: createUser
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: username
          in: path
          name: person
          required: true
          type: string
        - description: profile
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UserProfileEdit'
        - description: Password, leave empty if you don't want to set any
          in: query
          name: password
          required: false
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a new user.
      tags:
        - IAM v1
  /iam/v1/people/{repository}/{person}/avatar:
    delete:
      description: Remove avatar of the user. (To Remove foreign avatars, admin rights
        are required.)
      operationId: removeUserAvatar
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - default: -me-
          description: username (or "-me-" for current user)
          in: path
          name: person
          required: true
          type: string
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Remove avatar of the user.
      tags:
        - IAM v1
    put:
      description: Set avatar of the user. (To set foreign avatars, admin rights are
        required.)
      operationId: changeUserAvatar
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - default: -me-
          description: username (or "-me-" for current user)
          in: path
          name: person
          required: true
          type: string
        - description: avatar image
          in: formData
          name: avatar
          required: true
          type: file
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Set avatar of the user.
      tags:
        - IAM v1
  /iam/v1/people/{repository}/{person}/credential:
    put:
      description: Change/Set password of the user. (To change foreign passwords or
        set passwords, admin rights are required.)
      operationId: changeUserPassword
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - default: -me-
          description: username (or "-me-" for current user)
          in: path
          name: person
          required: true
          type: string
        - description: credential
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UserCredential'
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Change/Set password of the user.
      tags:
        - IAM v1
  /iam/v1/people/{repository}/{person}/memberships:
    get:
      description: ''
      operationId: getUserGroups
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: authority name
          in: path
          name: person
          required: true
          type: string
        - description: pattern
          in: query
          name: pattern
          required: false
          type: string
        - default: '10'
          description: maximum items per page
          format: int32
          in: query
          name: maxItems
          required: false
          type: integer
        - default: '0'
          description: skip a number of items
          format: int32
          in: query
          name: skipCount
          required: false
          type: integer
        - collectionFormat: multi
          description: sort properties
          in: query
          items:
            type: string
          name: sortProperties
          required: false
          type: array
        - collectionFormat: multi
          description: sort ascending, true if not set. Use multiple values to change
            the direction according to the given property at the same index
          in: query
          items:
            type: boolean
          name: sortAscending
          required: false
          type: array
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/GroupEntries'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get all groups the given user is member of.
      tags:
        - IAM v1
  /iam/v1/people/{repository}/{person}/nodeList/{list}:
    get:
      description: For guest users, the list will be temporary stored in the current
        session
      operationId: getNodeList
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - default: -me-
          description: username (or "-me-" for current user)
          in: path
          name: person
          required: true
          type: string
        - description: list name
          in: path
          name: list
          required: true
          type: string
        - collectionFormat: multi
          description: property filter for result nodes (or "-all-" for all properties)
          in: query
          items:
            default: -all-
            type: string
          name: propertyFilter
          required: false
          type: array
        - collectionFormat: multi
          description: sort properties
          in: query
          items:
            type: string
          name: sortProperties
          required: false
          type: array
        - collectionFormat: multi
          description: sort ascending, true if not set. Use multiple values to change
            the direction according to the given property at the same index
          in: query
          items:
            type: boolean
          name: sortAscending
          required: false
          type: array
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeEntries'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get a specific node list for a user
      tags:
        - IAM v1
  /iam/v1/people/{repository}/{person}/nodeList/{list}/{node}:
    delete:
      description: For guest users, the list will be temporary stored in the current
        session
      operationId: removeNodeList
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - default: -me-
          description: username (or "-me-" for current user)
          in: path
          name: person
          required: true
          type: string
        - description: list name
          in: path
          name: list
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Deelete a node of a node list of a user
      tags:
        - IAM v1
    put:
      description: For guest users, the list will be temporary stored in the current
        session
      operationId: addNodeList
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - default: -me-
          description: username (or "-me-" for current user)
          in: path
          name: person
          required: true
          type: string
        - description: list name. If this list does not exist, it will be created
          in: path
          name: list
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Add a node to node a list of a user
      tags:
        - IAM v1
  /iam/v1/people/{repository}/{person}/preferences:
    get:
      description: Will fail for guest
      operationId: getPreferences
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - default: -me-
          description: username (or "-me-" for current user)
          in: path
          name: person
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/Preferences'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get preferences stored for user
      tags:
        - IAM v1
    put:
      description: Will fail for guest
      operationId: setPreferences
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - default: -me-
          description: username (or "-me-" for current user)
          in: path
          name: person
          required: true
          type: string
        - description: preferences (json string)
          in: body
          name: body
          required: true
          schema:
            default: -me-
            type: string
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Set preferences for user
      tags:
        - IAM v1
  /iam/v1/people/{repository}/{person}/profile:
    put:
      description: Set profile of the user. (To set foreign profiles, admin rights
        are required.)
      operationId: changeUserProfile
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - default: -me-
          description: username (or "-me-" for current user)
          in: path
          name: person
          required: true
          type: string
        - description: properties
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UserProfileEdit'
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Set profile of the user.
      tags:
        - IAM v1
  /iam/v1/people/{repository}/{person}/profileSettings:
    get:
      description: Will fail for guest
      operationId: getProfileSettings
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - default: -me-
          description: username (or "-me-" for current user)
          in: path
          name: person
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/ProfileSettings'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get profileSettings configuration
      tags:
        - IAM v1
    put:
      description: Will fail for guest
      operationId: setProfileSettings
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - default: -me-
          description: username (or "-me-" for current user)
          in: path
          name: person
          required: true
          type: string
        - description: ProfileSetting Object
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ProfileSettings'
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Set profileSettings Configuration
      tags:
        - IAM v1
  /iam/v1/people/{repository}/{person}/stats:
    get:
      description: Get the user stats (e.g. publicly created material count)
      operationId: getUserStats
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - default: -me-
          description: username (or "-me-" for current user)
          in: path
          name: person
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/UserStats'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get the user stats.
      tags:
        - IAM v1
  /iam/v1/people/{repository}/{person}/status/{status}:
    put:
      description: update the user status. (admin rights are required.)
      operationId: updateUserStatus
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: username
          in: path
          name: person
          required: true
          type: string
        - description: the new status to set
          enum:
            - active
            - blocked
            - todelete
          in: path
          name: status
          required: true
          type: string
        - default: 'true'
          description: notify the user via mail
          in: query
          name: notify
          required: true
          type: boolean
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: update the user status.
      tags:
        - IAM v1
  /mds/v1/metadatasetsV2/{repository}:
    get:
      description: Get metadata sets V2 of repository.
      operationId: getMetadataSetsV2
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/MdsEntriesV2'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get metadata sets V2 of repository.
      tags:
        - MDS v1
  /mds/v1/metadatasetsV2/{repository}/{metadataset}:
    get:
      description: Get metadata set new.
      operationId: getMetadataSetV2
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - default: -default-
          description: ID of metadataset (or "-default-" for default metadata set)
          in: path
          name: metadataset
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/MdsV2'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get metadata set new.
      tags:
        - MDS v1
  /mds/v1/metadatasetsV2/{repository}/{metadataset}/values:
    post:
      description: Get values.
      operationId: getValuesV2
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - default: -default-
          description: ID of metadataset (or "-default-" for default metadata set)
          in: path
          name: metadataset
          required: true
          type: string
        - description: suggestionParam
          in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/SuggestionParam'
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/MdsEntry'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get values.
      tags:
        - MDS v1
  /mediacenter/v1/import/mc_org:
    post:
      description: Import Mediacenter Organisation Connection.
      operationId: importMcOrgConnections
      parameters:
        - description: Mediacenter Organisation Connection csv to import
          in: formData
          name: mcOrgs
          required: true
          type: file
        - default: 'false'
          description: removeSchoolsFromMC
          in: query
          name: removeSchoolsFromMC
          required: false
          type: boolean
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/McOrgConnectResult'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Import Mediacenter Organisation Connection
      tags:
        - MEDIACENTER v1
  /mediacenter/v1/import/mediacenters:
    post:
      description: Import mediacenters.
      operationId: importMediacenters
      parameters:
        - description: Mediacenters csv to import
          in: formData
          name: mediacenters
          required: true
          type: file
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/MediacentersImportResult'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Import mediacenters
      tags:
        - MEDIACENTER v1
  /mediacenter/v1/import/organisations:
    post:
      description: Import Organisations.
      operationId: importOrganisations
      parameters:
        - description: Organisations csv to import
          in: formData
          name: organisations
          required: true
          type: file
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/OrganisationsImportResult'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Import Organisations
      tags:
        - MEDIACENTER v1
  /mediacenter/v1/mediacenter/{repository}:
    get:
      description: Only shows the one available/managing the current user (only admin
        can access all)
      operationId: getMediacenters
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            items:
              $ref: '#/definitions/Mediacenter'
            type: array
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: Duplicate Entity/Node conflict (Node with same name exists)
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: get mediacenters in the repository.
      tags:
        - MEDIACENTER v1
  /mediacenter/v1/mediacenter/{repository}/{mediacenter}:
    delete:
      description: admin rights are required.
      operationId: deleteMediacenter
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: authorityName of the mediacenter that should manage the group
          in: path
          name: mediacenter
          required: true
          type: string
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: Duplicate Entity/Node conflict (Node with same name exists)
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: delete a mediacenter group and it's admin group and proxy group
      tags:
        - MEDIACENTER v1
    post:
      description: admin rights are required.
      operationId: createMediacenter
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: mediacenter name
          in: path
          name: mediacenter
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/Profile'
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/Mediacenter'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: Duplicate Entity/Node conflict (Node with same name exists)
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: create new mediacenter in repository.
      tags:
        - MEDIACENTER v1
    put:
      description: ''
      operationId: editMediacenter
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: mediacenter name
          in: path
          name: mediacenter
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/Profile'
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/Mediacenter'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: Duplicate Entity/Node conflict (Node with same name exists)
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: edit a mediacenter in repository.
      tags:
        - MEDIACENTER v1
  /mediacenter/v1/mediacenter/{repository}/{mediacenter}/licenses:
    post:
      description: ''
      operationId: getMediacenterLicensedNodes
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - default: '10'
          description: maximum items per page
          format: int32
          in: query
          name: maxItems
          required: false
          type: integer
        - default: '0'
          description: skip a number of items
          format: int32
          in: query
          name: skipCount
          required: false
          type: integer
        - collectionFormat: multi
          description: sort properties
          in: query
          items:
            type: string
          name: sortProperties
          required: false
          type: array
        - collectionFormat: multi
          description: sort ascending, true if not set. Use multiple values to change
            the direction according to the given property at the same index
          in: query
          items:
            type: boolean
          name: sortAscending
          required: false
          type: array
        - collectionFormat: multi
          description: property filter for result nodes (or "-all-" for all properties)
          in: query
          items:
            default: -all-
            type: string
          name: propertyFilter
          required: false
          type: array
        - description: authorityName of the mediacenter that licenses nodes
          in: path
          name: mediacenter
          required: true
          type: string
        - description: searchword of licensed nodes
          in: query
          name: searchword
          required: true
          type: string
        - description: search parameters
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/SearchParameters'
      responses:
        '200':
          description: OK.
          schema:
            items:
              $ref: '#/definitions/Group'
            type: array
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: Duplicate Entity/Node conflict (Node with same name exists)
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: get nodes that are licensed by the given mediacenter
      tags:
        - MEDIACENTER v1
  /mediacenter/v1/mediacenter/{repository}/{mediacenter}/manages:
    get:
      description: ''
      operationId: getMediacenterGroups
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: authorityName of the mediacenter that should manage the group
          in: path
          name: mediacenter
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            items:
              $ref: '#/definitions/Group'
            type: array
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: Duplicate Entity/Node conflict (Node with same name exists)
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: get groups that are managed by the given mediacenter
      tags:
        - MEDIACENTER v1
  /mediacenter/v1/mediacenter/{repository}/{mediacenter}/manages/{group}:
    delete:
      description: admin rights are required.
      operationId: removeMediacenterGroup
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: authorityName of the mediacenter that should manage the group
          in: path
          name: mediacenter
          required: true
          type: string
        - description: authorityName of the group that should not longer be managed
            by that mediacenter
          in: path
          name: group
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            items:
              $ref: '#/definitions/Group'
            type: array
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: Duplicate Entity/Node conflict (Node with same name exists)
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: delete a group that is managed by the given mediacenter
      tags:
        - MEDIACENTER v1
    put:
      description: although not restricted, it is recommended that the group is an
        edu-sharing organization (admin rights are required)
      operationId: addMediacenterGroup
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: authorityName of the mediacenter that should manage the group
          in: path
          name: mediacenter
          required: true
          type: string
        - description: authorityName of the group that should be managed by that mediacenter
          in: path
          name: group
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            items:
              $ref: '#/definitions/Group'
            type: array
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: Duplicate Entity/Node conflict (Node with same name exists)
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: add a group that is managed by the given mediacenter
      tags:
        - MEDIACENTER v1
  /network/v1/repositories:
    get:
      description: Get repositories.
      operationId: getRepositories
      parameters: []
      responses:
        '200':
          description: OK.
          schema:
            items:
              $ref: '#/definitions/RepoEntries'
            type: array
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get repositories.
      tags:
        - NETWORK v1
  /network/v1/service:
    get:
      description: Get the servic entry from the current repository.
      operationId: getService
      parameters: []
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/StoredService'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get own service.
      tags:
        - NETWORK v1
  /network/v1/services:
    get:
      description: Get registerted services.
      operationId: getServices
      parameters:
        - description: search or filter for services
          in: query
          name: query
          required: false
          type: string
      responses:
        '200':
          description: OK.
          schema:
            items:
              $ref: '#/definitions/StoredService'
            type: array
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get services.
      tags:
        - NETWORK v1
    post:
      description: Register a new service.
      operationId: addService
      parameters:
        - description: Service data object
          in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/Service'
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/StoredService'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Register service.
      tags:
        - NETWORK v1
  /network/v1/services/{id}:
    put:
      description: Update an existing service.
      operationId: updateService
      parameters:
        - description: Service id
          in: path
          name: id
          required: true
          type: string
        - description: Service data object
          in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/Service'
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/StoredService'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update a service.
      tags:
        - NETWORK v1
  /node/v1/nodes/{repository}:
    post:
      description: Searching nodes.
      operationId: getNodes
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: lucene query
          in: query
          name: query
          required: true
          type: string
        - collectionFormat: multi
          description: facettes
          in: query
          items:
            type: string
          name: facettes
          required: false
          type: array
        - default: '10'
          description: maximum items per page
          format: int32
          in: query
          name: maxItems
          required: false
          type: integer
        - default: '0'
          description: skip a number of items
          format: int32
          in: query
          name: skipCount
          required: false
          type: integer
        - collectionFormat: multi
          description: sort properties
          in: query
          items:
            type: string
          name: sortProperties
          required: false
          type: array
        - collectionFormat: multi
          description: sort ascending, true if not set. Use multiple values to change
            the direction according to the given property at the same index
          in: query
          items:
            type: boolean
          name: sortAscending
          required: false
          type: array
        - collectionFormat: multi
          description: property filter for result nodes (or "-all-" for all properties)
          in: query
          items:
            default: -all-
            type: string
          name: propertyFilter
          required: false
          type: array
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/SearchResult'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Searching nodes.
      tags:
        - NODE v1
  /node/v1/nodes/{repository}/{node}:
    delete:
      description: Delete node.
      operationId: delete
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
        - default: 'true'
          description: move the node to recycle
          in: query
          name: recycle
          required: false
          type: boolean
        - description: protocol
          in: query
          name: protocol
          required: false
          type: string
        - description: store
          in: query
          name: store
          required: false
          type: string
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete node.
      tags:
        - NODE v1
  /node/v1/nodes/{repository}/{node}/aspects:
    put:
      description: Add aspect to node.
      operationId: addAspects
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
        - description: aspect name, e.g. ccm:lomreplication
          in: body
          name: body
          required: true
          schema:
            items:
              type: string
            type: array
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeEntry'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Add aspect to node.
      tags:
        - NODE v1
  /node/v1/nodes/{repository}/{node}/assocs:
    get:
      description: Get nodes related based on an assoc.
      operationId: getAssocs
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
        - default: '500'
          description: maximum items per page
          format: int32
          in: query
          name: maxItems
          required: false
          type: integer
        - default: '0'
          description: skip a number of items
          format: int32
          in: query
          name: skipCount
          required: false
          type: integer
        - collectionFormat: multi
          description: sort properties
          in: query
          items:
            type: string
          name: sortProperties
          required: false
          type: array
        - collectionFormat: multi
          description: sort ascending, true if not set. Use multiple values to change
            the direction according to the given property at the same index
          in: query
          items:
            type: boolean
          name: sortAscending
          required: false
          type: array
        - description: Either where the given node should be the "SOURCE" or the "TARGET"
          enum:
            - SOURCE
            - TARGET
          in: query
          name: direction
          required: true
          type: string
        - description: Association name (e.g. ccm:forkio).
          in: query
          name: assocName
          required: false
          type: string
        - collectionFormat: multi
          description: property filter for result nodes (or "-all-" for all properties)
          in: query
          items:
            default: -all-
            type: string
          name: propertyFilter
          required: false
          type: array
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeEntries'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get related nodes.
      tags:
        - NODE v1
  /node/v1/nodes/{repository}/{node}/children:
    get:
      description: Get children of node.
      operationId: getChildren
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of parent node (or "-userhome-" for home directory of current
            user, "-shared_files-" for shared folders, "-to_me_shared_files" for shared
            files for the user,"-my_shared_files-" for files shared by the user, "-inbox-"
            for the inbox, "-workflow_receive-" for files assigned by workflow, "-saved_search-"
            for saved searches of the user)
          in: path
          name: node
          required: true
          type: string
        - default: '500'
          description: maximum items per page
          format: int32
          in: query
          name: maxItems
          required: false
          type: integer
        - default: '0'
          description: skip a number of items
          format: int32
          in: query
          name: skipCount
          required: false
          type: integer
        - collectionFormat: multi
          description: filter by type files,folders
          in: query
          items:
            type: string
          name: filter
          required: false
          type: array
        - collectionFormat: multi
          description: sort properties
          in: query
          items:
            type: string
          name: sortProperties
          required: false
          type: array
        - collectionFormat: multi
          description: sort ascending, true if not set. Use multiple values to change
            the direction according to the given property at the same index
          in: query
          items:
            type: boolean
          name: sortAscending
          required: false
          type: array
        - description: Filter for a specific association. May be empty
          in: query
          name: assocName
          required: false
          type: string
        - collectionFormat: multi
          description: property filter for result nodes (or "-all-" for all properties)
          in: query
          items:
            default: -all-
            type: string
          name: propertyFilter
          required: false
          type: array
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeEntries'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get children of node.
      tags:
        - NODE v1
    post:
      description: Create a new child.
      operationId: createChild
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of parent node use -userhome- for userhome or -inbox- for
            inbox node
          in: path
          name: node
          required: true
          type: string
        - description: type of node
          in: query
          name: type
          required: true
          type: string
        - collectionFormat: multi
          description: aspects of node
          in: query
          items:
            type: string
          name: aspects
          required: false
          type: array
        - default: 'false'
          description: rename if the same node name exists
          in: query
          name: renameIfExists
          required: false
          type: boolean
        - description: comment, leave empty = no inital version
          in: query
          name: versionComment
          required: false
          type: string
        - description: 'properties, example: {"{http://www.alfresco.org/model/content/1.0}name":
            ["test"]}'
          in: body
          name: body
          required: true
          schema:
            additionalProperties:
              items:
                type: string
              type: array
            type: object
        - description: Association type, can be empty
          in: query
          name: assocType
          required: false
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeEntry'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: Duplicate Entity/Node conflict (Node with same name exists)
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a new child.
      tags:
        - NODE v1
  /node/v1/nodes/{repository}/{node}/children/_copy:
    post:
      description: Create a new child by copying.
      operationId: createChildByCopying
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of parent node
          in: path
          name: node
          required: true
          type: string
        - description: ID of source node
          in: query
          name: source
          required: true
          type: string
        - description: flag for children
          in: query
          name: withChildren
          required: true
          type: boolean
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeEntry'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: Duplicate Entity/Node conflict (Node with same name exists)
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a new child by copying.
      tags:
        - NODE v1
  /node/v1/nodes/{repository}/{node}/children/_fork:
    post:
      description: ''
      operationId: createForkOfNode
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of parent node
          in: path
          name: node
          required: true
          type: string
        - description: ID of source node
          in: query
          name: source
          required: true
          type: string
        - description: flag for children
          in: query
          name: withChildren
          required: true
          type: boolean
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeEntry'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: Duplicate Entity/Node conflict (Node with same name exists)
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a copy of a node by creating a forked version (variant).
      tags:
        - NODE v1
  /node/v1/nodes/{repository}/{node}/children/_move:
    post:
      description: Create a new child by moving.
      operationId: createChildByMoving
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of parent node
          in: path
          name: node
          required: true
          type: string
        - description: ID of source node
          in: query
          name: source
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeEntry'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: Duplicate Entity/Node conflict (Node with same name exists)
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a new child by moving.
      tags:
        - NODE v1
  /node/v1/nodes/{repository}/{node}/content:
    post:
      consumes:
        - multipart/form-data
      description: Change content of node.
      operationId: changeContent
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
        - description: comment, leave empty = no new version, otherwise new version
            is generated
          in: query
          name: versionComment
          required: false
          type: string
        - description: MIME-Type
          in: query
          name: mimetype
          required: true
          type: string
        - in: formData
          name: file
          required: false
          type: file
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeEntry'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Change content of node.
      tags:
        - NODE v1
  /node/v1/nodes/{repository}/{node}/import:
    post:
      description: Import a node from a foreign repository to the local repository.
      operationId: importNode
      parameters:
        - description: The id of the foreign repository
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
        - description: Parent node where to store it locally, may also use -userhome-
            or -inbox-
          in: query
          name: parent
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeEntry'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Import node
      tags:
        - NODE v1
  /node/v1/nodes/{repository}/{node}/lock/status:
    get:
      description: locked status of a node.
      operationId: islocked
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeLocked'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: locked status of a node.
      tags:
        - NODE v1
  /node/v1/nodes/{repository}/{node}/lock/unlock:
    get:
      description: unlock node.
      operationId: unlock
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: unlock node.
      tags:
        - NODE v1
  /node/v1/nodes/{repository}/{node}/metadata:
    get:
      description: Get metadata of node.
      operationId: getMetadata
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
        - collectionFormat: multi
          description: property filter for result nodes (or "-all-" for all properties)
          in: query
          items:
            default: -all-
            type: string
          name: propertyFilter
          required: false
          type: array
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeEntry'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get metadata of node.
      tags:
        - NODE v1
    post:
      description: Change metadata of node (new version).
      operationId: changeMetadataWithVersioning
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
        - description: comment
          in: query
          name: versionComment
          required: true
          type: string
        - description: properties
          in: body
          name: body
          required: true
          schema:
            additionalProperties:
              items:
                type: string
              type: array
            type: object
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeEntry'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: Duplicate Entity/Node conflict (Node with same name exists)
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Change metadata of node (new version).
      tags:
        - NODE v1
    put:
      description: Change metadata of node.
      operationId: changeMetadata
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
        - description: properties
          in: body
          name: body
          required: true
          schema:
            additionalProperties:
              items:
                type: string
              type: array
            type: object
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeEntry'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: Duplicate Entity/Node conflict (Node with same name exists)
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Change metadata of node.
      tags:
        - NODE v1
  /node/v1/nodes/{repository}/{node}/metadata/template:
    get:
      description: All the given metadata will be inherited to child nodes.
      operationId: getTemplateMetadata
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeEntry'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: Duplicate Entity/Node conflict (Node with same name exists)
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get the metadata template + status for this folder.
      tags:
        - NODE v1
    put:
      description: All the given metadata will be inherited to child nodes.
      operationId: changeTemplateMetadata
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
        - description: Is the inherition currently enabled
          in: query
          name: enable
          required: true
          type: boolean
        - description: properties
          in: body
          name: body
          required: true
          schema:
            additionalProperties:
              items:
                type: string
              type: array
            type: object
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeEntry'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: Duplicate Entity/Node conflict (Node with same name exists)
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Set the metadata template for this folder.
      tags:
        - NODE v1
  /node/v1/nodes/{repository}/{node}/notifys:
    get:
      description: Ordered by the time of each notify
      operationId: getNotifyList
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            items:
              $ref: '#/definitions/NotifyEntry'
            type: array
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get notifys (sharing history) of the node.
      tags:
        - NODE v1
  /node/v1/nodes/{repository}/{node}/owner:
    post:
      description: Set owner of node.
      operationId: setOwner
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
        - description: username
          in: query
          name: username
          required: false
          type: string
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Set owner of node.
      tags:
        - NODE v1
  /node/v1/nodes/{repository}/{node}/parents:
    get:
      description: Get all parents metadata + own metadata of node. Index 0 is always
        the current node
      operationId: getParents
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
        - collectionFormat: multi
          description: property filter for result nodes (or "-all-" for all properties)
          in: query
          items:
            type: string
          name: propertyFilter
          required: false
          type: array
        - description: activate to return the full alfresco path, otherwise the path
            for the user home is resolved
          in: query
          name: fullPath
          required: false
          type: boolean
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/ParentEntries'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get parents of node.
      tags:
        - NODE v1
  /node/v1/nodes/{repository}/{node}/permissions:
    get:
      description: Get all permission of node.
      operationId: getPermission
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodePermissionEntry'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get all permission of node.
      tags:
        - NODE v1
    post:
      description: Set local permissions of node.
      operationId: setPermission
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
        - description: permissions
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ACL'
        - description: mailtext
          in: query
          name: mailtext
          required: false
          type: string
        - description: sendMail
          in: query
          name: sendMail
          required: true
          type: boolean
        - description: sendCopy
          in: query
          name: sendCopy
          required: true
          type: boolean
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Set local permissions of node.
      tags:
        - NODE v1
  /node/v1/nodes/{repository}/{node}/permissions/{user}:
    get:
      description: Check for actual permissions (also when user is in groups) for
        a specific node
      operationId: hasPermission
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
        - description: Authority (user/group) to check (use "-me-" for current user
          in: path
          name: user
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            items:
              type: string
            type: array
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Which permissions has user/group for node.
      tags:
        - NODE v1
  /node/v1/nodes/{repository}/{node}/prepareUsage:
    post:
      description: create remote object and get properties.
      operationId: prepareUsage
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeRemote'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: create remote object and get properties.
      tags:
        - NODE v1
  /node/v1/nodes/{repository}/{node}/preview:
    delete:
      description: ''
      operationId: deletePreview
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeEntry'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete preview of node.
      tags:
        - NODE v1
    post:
      consumes:
        - multipart/form-data
      description: Change preview of node.
      operationId: changePreview
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
        - in: formData
          name: image
          required: false
          type: file
        - description: MIME-Type
          in: query
          name: mimetype
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeEntry'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Change preview of node.
      tags:
        - NODE v1
  /node/v1/nodes/{repository}/{node}/property:
    post:
      description: When the property is unset (null), it will be removed
      operationId: setProperty
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
        - description: property
          in: query
          name: property
          required: true
          type: string
        - collectionFormat: multi
          description: value
          in: query
          items:
            type: string
          name: value
          required: false
          type: array
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Set single property of node.
      tags:
        - NODE v1
  /node/v1/nodes/{repository}/{node}/publish:
    get:
      description: Get all published copies of the current node
      operationId: getPublishedCopies
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeEntries'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Publish
      tags:
        - NODE v1
    post:
      description: 'Create a published copy of the current node '
      operationId: publishCopy
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
        - description: handle mode, if a handle should be created. Skip this parameter
            if you don't want an handle
          enum:
            - distinct
            - update
          in: query
          name: handleMode
          required: false
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeEntry'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Publish
      tags:
        - NODE v1
  /node/v1/nodes/{repository}/{node}/report:
    post:
      description: Report a node to notify the admin about an issue)
      operationId: reportNode
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
        - description: the reason for the report
          in: query
          name: reason
          required: true
          type: string
        - description: mail of reporting user
          in: query
          name: userEmail
          required: true
          type: string
        - description: additional user comment
          in: query
          name: userComment
          required: false
          type: string
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Report the node.
      tags:
        - NODE v1
  /node/v1/nodes/{repository}/{node}/shares:
    get:
      description: Get list of shares (via mail/token) for a node.
      operationId: getShares
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
        - description: Filter for a specific email or use LINK for link shares (Optional)
          in: query
          name: email
          required: false
          type: string
      responses:
        '200':
          description: OK.
          schema:
            items:
              $ref: '#/definitions/NodeShare'
            type: array
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get shares of node.
      tags:
        - NODE v1
    put:
      description: Create a new share for a node
      operationId: createShare
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
        - default: '-1'
          description: expiry date for this share, leave empty or -1 for unlimited
          format: int64
          in: query
          name: expiryDate
          required: false
          type: integer
        - description: password for this share, use none to not use a password
          in: query
          name: password
          required: false
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeShare'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a share for a node.
      tags:
        - NODE v1
  /node/v1/nodes/{repository}/{node}/shares/{shareId}:
    delete:
      description: Remove the specified share id
      operationId: removeShare
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
        - description: share id
          in: path
          name: shareId
          required: true
          type: string
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Remove share of a node.
      tags:
        - NODE v1
    post:
      description: update the specified share id
      operationId: updateShare
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
        - description: share id
          in: path
          name: shareId
          required: true
          type: string
        - default: '-1'
          description: expiry date for this share, leave empty or -1 for unlimited
          format: int64
          in: query
          name: expiryDate
          required: false
          type: integer
        - description: new password for share, leave empty if you don't want to change
            it
          in: query
          name: password
          required: false
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeShare'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: update share of a node.
      tags:
        - NODE v1
  /node/v1/nodes/{repository}/{node}/textContent:
    get:
      description: May fails with 500 if the node can not be read.
      operationId: getTextContent
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeText'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get the text content of a document.
      tags:
        - NODE v1
    post:
      consumes:
        - multipart/form-data
      description: Change content of node as text.
      operationId: changeContentAsText
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
        - description: comment, leave empty = no new version, otherwise new version
            is generated
          in: query
          name: versionComment
          required: false
          type: string
        - description: MIME-Type
          in: query
          name: mimetype
          required: true
          type: string
        - description: The content data to write (text)
          in: body
          name: body
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeEntry'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Change content of node as text.
      tags:
        - NODE v1
  /node/v1/nodes/{repository}/{node}/versions:
    get:
      description: Get all versions of node.
      operationId: getVersions
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeVersionRefEntries'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get all versions of node.
      tags:
        - NODE v1
  /node/v1/nodes/{repository}/{node}/versions/{major}/{minor}/_revert:
    put:
      description: Revert to node version.
      operationId: revertVersion
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
        - description: major version
          format: int32
          in: path
          name: major
          required: true
          type: integer
        - description: minor version
          format: int32
          in: path
          name: minor
          required: true
          type: integer
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeEntry'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Revert to node version.
      tags:
        - NODE v1
  /node/v1/nodes/{repository}/{node}/versions/{major}/{minor}/metadata:
    get:
      description: Get metadata of node version.
      operationId: getVersionMetadata
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
        - description: major version
          format: int32
          in: path
          name: major
          required: true
          type: integer
        - description: minor version
          format: int32
          in: path
          name: minor
          required: true
          type: integer
        - collectionFormat: multi
          description: property filter for result nodes (or "-all-" for all properties)
          in: query
          items:
            default: -all-
            type: string
          name: propertyFilter
          required: false
          type: array
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeVersionEntry'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get metadata of node version.
      tags:
        - NODE v1
  /node/v1/nodes/{repository}/{node}/workflow:
    get:
      description: Get workflow history of node.
      operationId: getWorkflowHistory
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            items:
              $ref: '#/definitions/WorkflowHistory'
            type: array
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get workflow history.
      tags:
        - NODE v1
    put:
      description: Add workflow entry to node.
      operationId: addWorkflowHistory
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
        - description: The history entry to put (editor and time can be null and will
            be filled automatically)
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/WorkflowHistory'
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Add workflow.
      tags:
        - NODE v1
  /node/v1/nodes/{repository}/{node}/xapi:
    post:
      description: ''
      operationId: storeXApiData
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
        - description: xApi conform json data
          in: body
          name: body
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK.
          schema:
            type: object
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: Duplicate Entity/Node conflict (Node with same name exists)
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Store xApi-Conform data for a given node
      tags:
        - NODE v1
  /organization/v1/organizations/{repository}:
    get:
      description: Get organizations of repository the current user is member. May
        returns an empty list.
      operationId: getOrganizations
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: pattern
          in: query
          name: pattern
          required: false
          type: string
        - default: '10'
          description: maximum items per page
          format: int32
          in: query
          name: maxItems
          required: false
          type: integer
        - default: '0'
          description: skip a number of items
          format: int32
          in: query
          name: skipCount
          required: false
          type: integer
        - collectionFormat: multi
          description: sort properties
          in: query
          items:
            type: string
          name: sortProperties
          required: false
          type: array
        - collectionFormat: multi
          description: sort ascending, true if not set. Use multiple values to change
            the direction according to the given property at the same index
          in: query
          items:
            type: boolean
          name: sortAscending
          required: false
          type: array
        - default: 'true'
          description: search only in memberships, false can only be done by admin
          in: query
          name: onlyMemberships
          required: false
          type: boolean
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/OrganizationEntries'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get organizations of repository.
      tags:
        - ORGANIZATION v1
  /organization/v1/organizations/{repository}/{organization}:
    delete:
      description: Delete organization of repository.
      operationId: deleteOrganizations
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: groupname
          in: path
          name: organization
          required: true
          type: string
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete organization of repository.
      tags:
        - ORGANIZATION v1
    get:
      description: Get organization by id.
      operationId: getOrganization
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of organization
          in: path
          name: organization
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/Organization'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get organization by id.
      tags:
        - ORGANIZATION v1
    put:
      description: create organization in repository.
      operationId: createOrganizations
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: organization name
          in: path
          name: organization
          required: true
          type: string
        - description: eduscope (may be null)
          in: query
          name: eduscope
          required: false
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/Organization'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: Duplicate Entity/Node conflict (Node with same name exists)
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: create organization in repository.
      tags:
        - ORGANIZATION v1
  /organization/v1/organizations/{repository}/{organization}/member/{member}:
    delete:
      description: Remove member from organization.
      operationId: removeFromOrganization
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: groupname
          in: path
          name: organization
          required: true
          type: string
        - description: authorityName of member
          in: path
          name: member
          required: true
          type: string
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Remove member from organization.
      tags:
        - ORGANIZATION v1
  /rating/v1/ratings/{repository}/{node}:
    delete:
      description: Delete the comment with the given id
      operationId: deleteRating
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: delete a comment
      tags:
        - RATING v1
    put:
      description: Adds the rating. If the current user already rated that element,
        the rating will be altered
      operationId: addOrUpdateRating
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
        - description: The rating (usually in range 1-5)
          format: double
          in: query
          name: rating
          required: true
          type: number
        - description: Text content of rating
          in: body
          name: body
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: create or update a rating
      tags:
        - RATING v1
  /register/v1/activate/{key}:
    post:
      description: ''
      operationId: activate
      parameters:
        - description: The key for the user to activate
          in: path
          name: key
          required: true
          type: string
      responses:
        '200':
          description: OK.
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Activate a new user (by using a supplied key)
      tags:
        - REGISTER v1
  /register/v1/exists/{mail}:
    get:
      description: ''
      operationId: mailExists
      parameters:
        - description: The mail (authority) of the user to check
          in: path
          name: mail
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/RegisterExists'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Check if the given mail is already successfully registered
      tags:
        - REGISTER v1
  /register/v1/recover/{mail}:
    post:
      description: ''
      operationId: recoverPassword
      parameters:
        - description: The mail (authority) of the user to recover
          in: path
          name: mail
          required: true
          type: string
      responses:
        '200':
          description: OK.
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Send a mail to recover/reset password
      tags:
        - REGISTER v1
  /register/v1/register:
    post:
      description: ''
      operationId: register
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/RegisterInformation'
      responses:
        '200':
          description: OK.
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Register a new user
      tags:
        - REGISTER v1
  /register/v1/resend/{mail}:
    post:
      description: The method will return false if there is no pending registration
        for the given mail
      operationId: resendMail
      parameters:
        - description: The mail a registration is pending for and should be resend
            to
          in: path
          name: mail
          required: true
          type: string
      responses:
        '200':
          description: OK.
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Resend a registration mail for a given mail address
      tags:
        - REGISTER v1
  /register/v1/reset/{key}/{password}:
    post:
      description: ''
      operationId: resetPassword
      parameters:
        - description: The key for the password reset request
          in: path
          name: key
          required: true
          type: string
        - description: The new password for the user
          in: path
          name: password
          required: true
          type: string
      responses:
        '200':
          description: OK.
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Send a mail to recover/reset password
      tags:
        - REGISTER v1
  /rendering/v1/details/{repository}/{node}:
    get:
      description: Get metadata of node.
      operationId: getDetailsSnippet
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
        - description: version of node
          in: query
          name: version
          required: false
          type: string
        - description: Rendering displayMode
          in: query
          name: displayMode
          required: false
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/RenderingDetailsEntry'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get metadata of node.
      tags:
        - RENDERING v1
    post:
      description: Get metadata of node.
      operationId: getDetailsSnippetWithParameters
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
        - description: version of node
          in: query
          name: version
          required: false
          type: string
        - description: Rendering displayMode
          in: query
          name: displayMode
          required: false
          type: string
        - description: additional parameters to send to the rendering service
          in: body
          name: body
          required: false
          schema:
            additionalProperties:
              type: string
            type: object
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/RenderingDetailsEntry'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get metadata of node.
      tags:
        - RENDERING v1
  /search/v1/custom/{repository}:
    get:
      consumes:
        - application/json
      description: e.g. property=cm:name, value:*Test*
      operationId: searchByProperty
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: Type of element
          enum:
            - FILES
            - FOLDERS
            - FILES_AND_FOLDERS
            - COLLECTIONS
            - TOOLPERMISSIONS
            - ALL
          in: query
          name: contentType
          required: false
          type: string
        - description: Combine mode, AND or OR, defaults to AND
          enum:
            - AND
            - OR
          in: query
          name: combineMode
          required: false
          type: string
        - collectionFormat: multi
          description: One (or more) properties to search for, will be combined by
            specified combine mode
          in: query
          items:
            type: string
          name: property
          required: false
          type: array
        - collectionFormat: multi
          description: One (or more) values to search for, matching the properties
            defined before
          in: query
          items:
            type: string
          name: value
          required: false
          type: array
        - collectionFormat: multi
          description: (Optional) comparator, only relevant for date or numerical
            fields, currently allowed =, <=, >=
          in: query
          items:
            type: string
          name: comparator
          required: false
          type: array
        - default: '10'
          description: maximum items per page
          format: int32
          in: query
          name: maxItems
          required: false
          type: integer
        - default: '0'
          description: skip a number of items
          format: int32
          in: query
          name: skipCount
          required: false
          type: integer
        - collectionFormat: multi
          description: sort properties
          in: query
          items:
            type: string
          name: sortProperties
          required: false
          type: array
        - collectionFormat: multi
          description: sort ascending, true if not set. Use multiple values to change
            the direction according to the given property at the same index
          in: query
          items:
            type: boolean
          name: sortAscending
          required: false
          type: array
        - collectionFormat: multi
          description: property filter for result nodes (or "-all-" for all properties)
          in: query
          items:
            default: -all-
            type: string
          name: propertyFilter
          required: false
          type: array
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/SearchResultNode'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Search for custom properties with custom values
      tags:
        - SEARCH v1
  /search/v1/queries/{repository}/fingerprint/{nodeid}:
    post:
      consumes:
        - application/json
      description: Perform queries based on metadata sets.
      operationId: searchFingerprint
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: nodeid
          in: path
          name: nodeid
          required: true
          type: string
        - default: '10'
          description: maximum items per page
          format: int32
          in: query
          name: maxItems
          required: false
          type: integer
        - default: '0'
          description: skip a number of items
          format: int32
          in: query
          name: skipCount
          required: false
          type: integer
        - collectionFormat: multi
          description: sort properties
          in: query
          items:
            type: string
          name: sortProperties
          required: false
          type: array
        - collectionFormat: multi
          description: sort ascending, true if not set. Use multiple values to change
            the direction according to the given property at the same index
          in: query
          items:
            type: boolean
          name: sortAscending
          required: false
          type: array
        - collectionFormat: multi
          description: property filter for result nodes (or "-all-" for all properties)
          in: query
          items:
            default: -all-
            type: string
          name: propertyFilter
          required: false
          type: array
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/SearchResultNode'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Perform queries based on metadata sets.
      tags:
        - SEARCH v1
  /search/v1/queriesV2/load/{nodeId}:
    get:
      consumes:
        - application/json
      description: Load a saved search query.
      operationId: loadSaveSearch
      parameters:
        - description: Node id of the search item
          in: path
          name: nodeId
          required: true
          type: string
        - description: Type of element
          enum:
            - FILES
            - FOLDERS
            - FILES_AND_FOLDERS
            - COLLECTIONS
            - TOOLPERMISSIONS
            - ALL
          in: query
          name: contentType
          required: false
          type: string
        - default: '10'
          description: maximum items per page
          format: int32
          in: query
          name: maxItems
          required: false
          type: integer
        - default: '0'
          description: skip a number of items
          format: int32
          in: query
          name: skipCount
          required: false
          type: integer
        - collectionFormat: multi
          description: sort properties
          in: query
          items:
            type: string
          name: sortProperties
          required: false
          type: array
        - collectionFormat: multi
          description: sort ascending, true if not set. Use multiple values to change
            the direction according to the given property at the same index
          in: query
          items:
            type: boolean
          name: sortAscending
          required: false
          type: array
        - description: facettes
          in: body
          name: body
          required: false
          schema:
            items:
              type: string
            type: array
        - collectionFormat: multi
          description: property filter for result nodes (or "-all-" for all properties)
          in: query
          items:
            default: -all-
            type: string
          name: propertyFilter
          required: false
          type: array
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/Node'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Load a saved search query.
      tags:
        - SEARCH v1
  /search/v1/queriesV2/{repository}/contributor:
    get:
      consumes:
        - application/json
      description: ''
      operationId: searchContributor
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: search word
          in: query
          name: searchWord
          required: true
          type: string
        - default: PERSON
          description: contributor kind
          enum:
            - PERSON
            - ORGANIZATION
          in: query
          name: contributorKind
          required: true
          type: string
        - collectionFormat: multi
          description: 'define which authority fields should be searched: [''firstname'',
            ''lastname'', ''email'', ''uuid'', ''url'']'
          in: query
          items:
            type: string
          name: fields
          required: false
          type: array
        - collectionFormat: multi
          description: 'define which contributor props should be searched: [''ccm:lifecyclecontributer_author'',
            ''ccm:lifecyclecontributer_publisher'', ..., ''ccm:metadatacontributer_creator'',
            ''ccm:metadatacontributer_validator'']'
          in: query
          items:
            type: string
          name: contributorProperties
          required: false
          type: array
      responses:
        '200':
          description: OK.
          schema:
            items:
              $ref: '#/definitions/SearchVCard'
            type: array
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Search for contributors
      tags:
        - SEARCH v1
  /search/v1/queriesV2/{repository}/{metadataset}/{query}:
    post:
      consumes:
        - application/json
      description: Perform queries based on metadata sets V2.
      operationId: searchV2
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - default: -default-
          description: ID of metadataset (or "-default-" for default metadata set)
          in: path
          name: metadataset
          required: true
          type: string
        - description: ID of query
          in: path
          name: query
          required: true
          type: string
        - description: Type of element
          enum:
            - FILES
            - FOLDERS
            - FILES_AND_FOLDERS
            - COLLECTIONS
            - TOOLPERMISSIONS
            - ALL
          in: query
          name: contentType
          required: false
          type: string
        - default: '10'
          description: maximum items per page
          format: int32
          in: query
          name: maxItems
          required: false
          type: integer
        - default: '0'
          description: skip a number of items
          format: int32
          in: query
          name: skipCount
          required: false
          type: integer
        - collectionFormat: multi
          description: sort properties
          in: query
          items:
            type: string
          name: sortProperties
          required: false
          type: array
        - collectionFormat: multi
          description: sort ascending, true if not set. Use multiple values to change
            the direction according to the given property at the same index
          in: query
          items:
            type: boolean
          name: sortAscending
          required: false
          type: array
        - description: search parameters
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/SearchParameters'
        - collectionFormat: multi
          description: property filter for result nodes (or "-all-" for all properties)
          in: query
          items:
            default: -all-
            type: string
          name: propertyFilter
          required: false
          type: array
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/SearchResultNode'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Perform queries based on metadata sets V2.
      tags:
        - SEARCH v1
  /search/v1/queriesV2/{repository}/{metadataset}/{query}/save:
    post:
      consumes:
        - application/json
      description: Save a search query.
      operationId: saveSearch
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - default: -default-
          description: ID of metadataset (or "-default-" for default metadata set)
          in: path
          name: metadataset
          required: true
          type: string
        - description: ID of query
          in: path
          name: query
          required: true
          type: string
        - description: Name of the new search item
          in: query
          name: name
          required: true
          type: string
        - default: 'false'
          description: Replace if search with the same name exists
          in: query
          name: replace
          required: false
          type: boolean
        - description: search parameters
          in: body
          name: body
          required: true
          schema:
            items:
              $ref: '#/definitions/MdsQueryCriteria'
            type: array
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeEntry'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Save a search query.
      tags:
        - SEARCH v1
  /search/v1/relevant/{repository}:
    get:
      consumes:
        - application/json
      description: ''
      operationId: getRelevantNodes
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - collectionFormat: multi
          description: property filter for result nodes (or "-all-" for all properties)
          in: query
          items:
            default: -all-
            type: string
          name: propertyFilter
          required: false
          type: array
        - default: '10'
          description: maximum items per page
          format: int32
          in: query
          name: maxItems
          required: false
          type: integer
        - default: '0'
          description: skip a number of items
          format: int32
          in: query
          name: skipCount
          required: false
          type: integer
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/SearchResultNode'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get relevant nodes for the current user
      tags:
        - SEARCH v1
  /sharing/v1/sharing/{repository}/{node}/{share}:
    get:
      description: ''
      operationId: getInfo
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
        - description: Share token
          in: path
          name: share
          required: true
          type: string
        - description: Password to validate (optional)
          in: query
          name: password
          required: false
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/SharingInfo'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get general info of a share.
      tags:
        - SHARING v1
  /sharing/v1/sharing/{repository}/{node}/{share}/children:
    get:
      description: Only valid for shared folders
      operationId: getChildren
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: node
          required: true
          type: string
        - description: Share token
          in: path
          name: share
          required: true
          type: string
        - description: Password (required if share is locked)
          in: query
          name: password
          required: false
          type: string
        - default: '500'
          description: maximum items per page
          format: int32
          in: query
          name: maxItems
          required: false
          type: integer
        - default: '0'
          description: skip a number of items
          format: int32
          in: query
          name: skipCount
          required: false
          type: integer
        - collectionFormat: multi
          description: sort properties
          in: query
          items:
            type: string
          name: sortProperties
          required: false
          type: array
        - collectionFormat: multi
          description: sort ascending, true if not set. Use multiple values to change
            the direction according to the given property at the same index
          in: query
          items:
            type: boolean
          name: sortAscending
          required: false
          type: array
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeEntries'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get all children of this share.
      tags:
        - SHARING v1
  /statistic/v1/facettes/{context}:
    post:
      description: Statistics.
      operationId: get
      parameters:
        - default: -root-
          description: context, the node where to start
          in: path
          name: context
          required: true
          type: string
        - description: filter
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Filter'
        - collectionFormat: multi
          description: properties
          in: query
          items:
            type: string
          name: properties
          required: false
          type: array
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/Statistics'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get statistics of repository.
      tags:
        - STATISTIC v1
  /statistic/v1/public:
    get:
      description: Get global statistics for this repository.
      operationId: getGlobalStatistics
      parameters:
        - description: primary property to build facettes and count+group values
          in: query
          name: group
          required: false
          type: string
        - collectionFormat: multi
          description: additional properties to build facettes and count+sub-group
            values
          in: query
          items:
            type: string
          name: subGroup
          required: false
          type: array
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/StatisticsGlobal'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get stats.
      tags:
        - STATISTIC v1
  /statistic/v1/statistics/nodes:
    post:
      description: requires either toolpermission TOOLPERMISSION_GLOBAL_STATISTICS_NODES
        for global stats or to be admin of the requested mediacenter
      operationId: getStatisticsNode
      parameters:
        - description: Grouping type (by date)
          enum:
            - None
            - Daily
            - Monthly
            - Yearly
            - Node
          in: query
          name: grouping
          required: true
          type: string
        - description: date range from
          format: int64
          in: query
          name: dateFrom
          required: true
          type: integer
        - description: date range to
          format: int64
          in: query
          name: dateTo
          required: true
          type: integer
        - description: the mediacenter to filter for statistics
          in: query
          name: mediacenter
          required: false
          type: string
        - collectionFormat: multi
          description: additionals fields of the custom json object stored in each
            query that should be returned
          in: query
          items:
            type: string
          name: additionalFields
          required: false
          type: array
        - collectionFormat: multi
          description: grouping fields of the custom json object stored in each query
            (currently only meant to be combined with no grouping by date)
          in: query
          items:
            type: string
          name: groupField
          required: false
          type: array
        - description: filters for the custom json object stored in each entry
          in: body
          name: body
          required: false
          schema:
            additionalProperties:
              type: string
            type: object
      responses:
        '200':
          description: OK.
          schema:
            items:
              $ref: '#/definitions/TrackingNode'
            type: array
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: get statistics for node actions
      tags:
        - STATISTIC v1
  /statistic/v1/statistics/nodes/altered:
    get:
      description: requires admin
      operationId: getNodesAlteredInRange
      parameters:
        - description: date range from
          format: int64
          in: query
          name: dateFrom
          required: true
          type: integer
      responses:
        '200':
          description: OK.
          schema:
            items:
              type: string
            type: array
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: get the range of nodes which had tracked actions since a given timestamp
      tags:
        - STATISTIC v1
  /statistic/v1/statistics/nodes/node/{id}:
    get:
      description: requires admin
      operationId: getNodeData
      parameters:
        - description: node id to fetch data for
          in: path
          name: id
          required: true
          type: string
        - description: date range from
          format: int64
          in: query
          name: dateFrom
          required: true
          type: integer
      responses:
        '200':
          description: OK.
          schema:
            items:
              $ref: '#/definitions/NodeData'
            type: array
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: get the range of nodes which had tracked actions since a given timestamp
      tags:
        - STATISTIC v1
  /statistic/v1/statistics/users:
    post:
      description: requires either toolpermission TOOLPERMISSION_GLOBAL_STATISTICS_USER
        for global stats or to be admin of the requested mediacenter
      operationId: getStatisticsUser
      parameters:
        - description: Grouping type (by date)
          enum:
            - None
            - Daily
            - Monthly
            - Yearly
            - Node
          in: query
          name: grouping
          required: true
          type: string
        - description: date range from
          format: int64
          in: query
          name: dateFrom
          required: true
          type: integer
        - description: date range to
          format: int64
          in: query
          name: dateTo
          required: true
          type: integer
        - description: the mediacenter to filter for statistics
          in: query
          name: mediacenter
          required: false
          type: string
        - collectionFormat: multi
          description: additionals fields of the custom json object stored in each
            query that should be returned
          in: query
          items:
            type: string
          name: additionalFields
          required: false
          type: array
        - collectionFormat: multi
          description: grouping fields of the custom json object stored in each query
            (currently only meant to be combined with no grouping by date)
          in: query
          items:
            type: string
          name: groupField
          required: false
          type: array
        - description: filters for the custom json object stored in each entry
          in: body
          name: body
          required: false
          schema:
            additionalProperties:
              type: string
            type: object
      responses:
        '200':
          description: OK.
          schema:
            items:
              $ref: '#/definitions/Tracking'
            type: array
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: get statistics for user actions (login, logout)
      tags:
        - STATISTIC v1
  /stream/v1/access/{repository}/{node}:
    get:
      description: ''
      operationId: canAccess
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: The property to aggregate
          in: path
          name: node
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            additionalProperties:
              type: object
            type: object
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: test
      tags:
        - STREAM v1
  /stream/v1/add/{repository}:
    put:
      description: will return the object and add the id to the object if creation
        succeeded
      operationId: addEntry
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: Stream object to add
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/StreamEntryInput'
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/StreamEntryInput'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: add a new stream object.
      tags:
        - STREAM v1
  /stream/v1/delete/{repository}/{entry}:
    delete:
      description: the current user must be author of the given stream object
      operationId: deleteEntry
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: entry id to delete
          in: path
          name: entry
          required: true
          type: string
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: delete a stream object
      tags:
        - STREAM v1
  /stream/v1/properties/{repository}/{property}:
    get:
      description: ''
      operationId: getPropertyValues
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: The property to aggregate
          in: path
          name: property
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            additionalProperties:
              type: object
            type: object
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get top values for a property
      tags:
        - STREAM v1
  /stream/v1/search/{repository}:
    post:
      description: ''
      operationId: search
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: Stream object status to search for
          in: query
          name: status
          required: false
          type: string
        - description: generic text to search for (in title or description)
          in: query
          name: query
          required: false
          type: string
        - default: '10'
          description: maximum items per page
          format: int32
          in: query
          name: maxItems
          required: false
          type: integer
        - default: '0'
          description: skip a number of items
          format: int32
          in: query
          name: skipCount
          required: false
          type: integer
        - description: map with property + value to search
          in: body
          name: body
          required: false
          schema:
            additionalProperties:
              type: string
            type: object
        - collectionFormat: multi
          description: 'sort properties, currently supported: created, priority, default:
            priority desc, created desc'
          in: query
          items:
            type: string
          name: sortProperties
          required: false
          type: array
        - collectionFormat: multi
          description: sort ascending, true if not set. Use multiple values to change
            the direction according to the given property at the same index
          in: query
          items:
            type: boolean
          name: sortAscending
          required: false
          type: array
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/StreamList'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get the stream content for the current user with the given status.
      tags:
        - STREAM v1
  /stream/v1/status/{repository}/{entry}:
    put:
      description: ''
      operationId: updateEntry
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: entry id to update
          in: path
          name: entry
          required: true
          type: string
        - description: authority to set/change status
          in: query
          name: authority
          required: true
          type: string
        - description: New status for this authority
          in: query
          name: status
          required: true
          type: string
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: update status for a stream object and authority
      tags:
        - STREAM v1
  /tool/v1/tools/{repository}/tooldefinitions:
    get:
      description: Get all ToolDefinitions.
      operationId: getAllToolDefinitions
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeEntry'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get all ToolDefinitions.
      tags:
        - TOOL v1
    post:
      description: Create a new tool definition object.
      operationId: createToolDefintition
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - default: 'false'
          description: rename if the same node name exists
          in: query
          name: renameIfExists
          required: false
          type: boolean
        - description: comment, leave empty = no inital version
          in: query
          name: versionComment
          required: false
          type: string
        - description: 'properties, example: {"{http://www.alfresco.org/model/content/1.0}name":
            ["test"]}'
          in: body
          name: body
          required: true
          schema:
            additionalProperties:
              items:
                type: string
              type: array
            type: object
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeEntry'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: Duplicate Entity/Node conflict (Node with same name exists)
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a new tool definition object.
      tags:
        - TOOL v1
  /tool/v1/tools/{repository}/{nodeid}/toolinstance:
    get:
      description: Get Instances of a ToolDefinition.
      operationId: getInstance
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: nodeid
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeEntry'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get Instances of a ToolDefinition.
      tags:
        - TOOL v1
  /tool/v1/tools/{repository}/{toolDefinition}/toolinstances:
    get:
      description: Get Instances of a ToolDefinition.
      operationId: getInstances
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of node
          in: path
          name: toolDefinition
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeEntry'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get Instances of a ToolDefinition.
      tags:
        - TOOL v1
    post:
      description: Create a new tool Instance object.
      operationId: createToolInstance
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of parent node must have tool_definition aspect
          in: path
          name: toolDefinition
          required: true
          type: string
        - default: 'false'
          description: rename if the same node name exists
          in: query
          name: renameIfExists
          required: false
          type: boolean
        - description: comment, leave empty = no inital version
          in: query
          name: versionComment
          required: false
          type: string
        - description: 'properties, example: {"{http://www.alfresco.org/model/content/1.0}name":
            ["test"]}'
          in: body
          name: body
          required: true
          schema:
            additionalProperties:
              items:
                type: string
              type: array
            type: object
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeEntry'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: Duplicate Entity/Node conflict (Node with same name exists)
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a new tool Instance object.
      tags:
        - TOOL v1
  /tool/v1/tools/{repository}/{toolinstance}/toolobject:
    post:
      description: Create a new tool object for a given tool instance.
      operationId: createToolObject
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ID of parent node (a tool instance object)
          in: path
          name: toolinstance
          required: true
          type: string
        - default: 'false'
          description: rename if the same node name exists
          in: query
          name: renameIfExists
          required: false
          type: boolean
        - description: comment, leave empty = no inital version
          in: query
          name: versionComment
          required: false
          type: string
        - description: 'properties, example: {"{http://www.alfresco.org/model/content/1.0}name":
            ["test"]}'
          in: body
          name: body
          required: true
          schema:
            additionalProperties:
              items:
                type: string
              type: array
            type: object
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/NodeEntry'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: Duplicate Entity/Node conflict (Node with same name exists)
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a new tool object for a given tool instance.
      tags:
        - TOOL v1
  /tracking/v1/tracking/{repository}/{event}:
    put:
      description: Currently limited to video / audio play interactions
      operationId: trackEvent
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: type of event to track
          enum:
            - DOWNLOAD_MATERIAL
            - VIEW_MATERIAL
            - VIEW_MATERIAL_EMBEDDED
            - VIEW_MATERIAL_PLAY_MEDIA
            - LOGIN_USER_SESSION
            - LOGIN_USER_OAUTH_PASSWORD
            - LOGIN_USER_OAUTH_REFRESH_TOKEN
            - LOGOUT_USER_TIMEOUT
            - LOGOUT_USER_REGULAR
          in: path
          name: event
          required: true
          type: string
        - description: node id for which the event is tracked. For some event, this
            can be null
          in: query
          name: node
          required: false
          type: string
      responses:
        '200':
          description: OK.
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Track a user interaction
      tags:
        - TRACKING v1
  /usage/v1/usages/course/{appId}/{courseId}:
    get:
      description: Get all usages of an course.
      operationId: getUsagesByCourse
      parameters:
        - description: ID of application (or "-home-" for home repository)
          in: path
          name: appId
          required: true
          type: string
        - description: ID of course
          in: path
          name: courseId
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/Usages'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get all usages of an course.
      tags:
        - USAGE v1
  /usage/v1/usages/node/{nodeId}:
    get:
      description: Get all usages of an node.
      operationId: getUsagesByNode
      parameters:
        - description: ID of node
          in: path
          name: nodeId
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/Usages'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get all usages of an node.
      tags:
        - USAGE v1
  /usage/v1/usages/node/{nodeId}/collections:
    get:
      description: ''
      operationId: getUsagesByNodeCollections
      parameters:
        - description: ID of node
          in: path
          name: nodeId
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            items:
              $ref: '#/definitions/Collection'
            type: array
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get all collections where this node is used.
      tags:
        - USAGE v1
  /usage/v1/usages/node/{nodeId}/{usageId}:
    delete:
      description: ''
      operationId: deleteUsage
      parameters:
        - description: ID of node
          in: path
          name: nodeId
          required: true
          type: string
        - description: ID of usage
          in: path
          name: usageId
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/Usages'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete an usage of a node.
      tags:
        - USAGE v1
  /usage/v1/usages/repository/{repositoryId}:
    post:
      description: 'headers must be set: X-Edu-App-Id, X-Edu-App-Sig, X-Edu-App-Signed,
        X-Edu-App-Ts'
      operationId: setUsage
      parameters:
        - default: -home-
          description: ID of repository (or "-home-" for home repository)
          in: path
          name: repository
          required: true
          type: string
        - description: ' usage date'
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Usage'
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/Usage'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Set a usage for a node. app signature headers and authenticated user
        required.
      tags:
        - USAGE v1
  /usage/v1/usages/repository/{repositoryId}/{nodeid}:
    get:
      operationId: getUsages
      parameters:
        - default: -home-
          description: ID of repository
          in: path
          name: repositoryId
          required: true
          type: string
        - default: -all-
          description: ID of node. Use -all- for getting usages of all nodes
          in: path
          name: nodeId
          required: true
          type: string
        - description: from date
          format: int64
          in: query
          name: from
          required: false
          type: integer
        - description: to date
          format: int64
          in: query
          name: to
          required: false
          type: integer
      responses:
        default:
          description: successful operation
      tags:
        - USAGE v1
  /usage/v1/usages/{appId}:
    get:
      description: Get all usages of an application.
      operationId: getUsages
      parameters:
        - description: ID of application (or "-home-" for home repository)
          in: path
          name: appId
          required: true
          type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/Usages'
        '400':
          description: Preconditions are not present.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Session user has insufficient rights to perform this operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Ressources are not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Fatal error occured.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get all usages of an application.
      tags:
        - USAGE v1
swagger: '2.0'
tags:
  - name: ABOUT
  - name: ADMIN v1
  - name: ARCHIVE v1
  - name: AUTHENTICATION v1
  - name: BULK v1
  - name: CLIENTUTILS v1
  - name: COLLECTION v1
  - name: COMMENT v1
  - name: CONFIG v1
  - name: CONNECTOR v1
  - name: IAM v1
  - name: MDS v1
  - name: MEDIACENTER v1
  - name: NETWORK v1
  - name: NODE v1
  - name: ORGANIZATION v1
  - name: RATING v1
  - name: REGISTER v1
  - name: RENDERING v1
  - name: SEARCH v1
  - name: SHARING v1
  - name: STATISTIC v1
  - name: STREAM v1
  - name: TOOL v1
  - name: TRACKING v1
  - name: USAGE v1
